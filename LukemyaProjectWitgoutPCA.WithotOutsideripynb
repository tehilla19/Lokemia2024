{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"_q0vQYc41ki3","executionInfo":{"status":"ok","timestamp":1721029579328,"user_tz":-180,"elapsed":3392,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.decomposition import PCA\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.svm import SVC\n","from sklearn.metrics import accuracy_score, classification_report\n","import matplotlib.pyplot as plt\n","import seaborn as sns"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"RHNPN6Uk2SsI","executionInfo":{"status":"ok","timestamp":1721030077589,"user_tz":-180,"elapsed":2655,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}}},"outputs":[],"source":["y = pd.read_csv('/content/drive/MyDrive/מיני פרוייקט לוקמיה/דאטא/y_data.csv', delimiter='\\t')\n","\n","train = pd.read_csv('/content/drive/MyDrive/מיני פרוייקט לוקמיה/דאטא/דאטא 1 מתוקן.xlsx - data_set_ALL_AML_train.csv')\n","\n","test = pd.read_csv('/content/drive/MyDrive/מיני פרוייקט לוקמיה/דאטא/דאטא 2 מתוקן - data_set_ALL_AML_independent.csv')"]},{"cell_type":"markdown","metadata":{"id":"beNeNVEdUKbe"},"source":["מפרידה את העמודות לשני עמודות עם כותרות שיקל בזיהוי"]},{"cell_type":"code","source":["# הצגת הנתונים לפני הפיצול\n","print(\"Data before splitting:\")\n","print(y.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sKD6l_de0ueg","executionInfo":{"status":"ok","timestamp":1721030172222,"user_tz":-180,"elapsed":408,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"b1b0de36-a6c4-455e-9fc6-b3ae1e9f8717"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Data before splitting:\n","  patient,cancer\n","0          1,ALL\n","1          2,ALL\n","2          3,ALL\n","3          4,ALL\n","4          5,ALL\n"]}]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":420,"status":"ok","timestamp":1721030175586,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"},"user_tz":-180},"id":"-EiOjP1z_YOF","outputId":"73dfe618-f5f3-44b2-fe86-c5da643f8977"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Data after splitting:\n","  patient cancer\n","0       1    ALL\n","1       2    ALL\n","2       3    ALL\n","3       4    ALL\n","4       5    ALL\n","\n","Columns of y:\n","Index(['patient', 'cancer'], dtype='object')\n"]}],"source":["import pandas as pd\n","\n","# פיצול עמודת 'patient,cancer' לשתי עמודות נפרדות\n","if 'patient,cancer' in y.columns:\n","    y[['patient', 'cancer']] = y['patient,cancer'].str.split(',', expand=True)\n","    y = y.drop('patient,cancer', axis=1)\n","\n","# הצגת הנתונים לאחר הפיצול\n","print(\"\\nData after splitting:\")\n","print(y.head())\n","\n","# הצגת שמות העמודות של y\n","print(\"\\nColumns of y:\")\n","print(y.columns)\n","\n"]},{"cell_type":"markdown","metadata":{"id":"9S0ais52Uytb"},"source":["מדפיסה לראות את הכותרות של העמודות בכל קובץ"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":453,"status":"ok","timestamp":1721030179628,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"},"user_tz":-180},"id":"Z2g13AY-DG7I","outputId":"5387c6d0-2945-4cd6-999d-720ee5c59872","collapsed":true},"outputs":[{"output_type":"stream","name":"stdout","text":["y columns: Index(['patient', 'cancer'], dtype='object')\n","train columns: Index(['Gene Description', 'Gene Accession Number', '1', '2', '3', '4', '5',\n","       '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17',\n","       '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '34', '35',\n","       '36', '37', '38', '28', '29', '30', '31', '32', '33'],\n","      dtype='object')\n","test columns: Index(['Gene Description', 'Gene Accession Number', '39', '40', '42', '47',\n","       '48', '49', '41', '43', '44', '45', '46', '70', '71', '72', '68', '69',\n","       '67', '55', '56', '59', '52', '53', '51', '50', '54', '57', '58', '60',\n","       '61', '65', '66', '63', '64', '62'],\n","      dtype='object')\n"]}],"source":["print(\"y columns:\", y.columns)\n","print(\"train columns:\", train.columns)\n","print(\"test columns:\", test.columns)"]},{"cell_type":"markdown","source":["מדפיסה את ההתחלה של כל קובץ כדי להבין יותר את הדאטא"],"metadata":{"id":"BazUWB1M3yS1"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"uLcOSUrpA9fZ","colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"executionInfo":{"status":"ok","timestamp":1719807042859,"user_tz":-180,"elapsed":14,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"0fc75837-e0bc-4eec-c58d-0f2065113961"},"outputs":[{"output_type":"stream","name":"stdout","text":["                      Gene Description Gene Accession Number    1    2    3  \\\n","0  AFFX-BioB-5_at (endogenous control)        AFFX-BioB-5_at -214 -139  -76   \n","1  AFFX-BioB-M_at (endogenous control)        AFFX-BioB-M_at -153  -73  -49   \n","2  AFFX-BioB-3_at (endogenous control)        AFFX-BioB-3_at  -58   -1 -307   \n","3  AFFX-BioC-5_at (endogenous control)        AFFX-BioC-5_at   88  283  309   \n","4  AFFX-BioC-3_at (endogenous control)        AFFX-BioC-3_at -295 -264 -376   \n","\n","     4    5    6    7    8  ...   35   36   37   38   28   29   30   31   32  \\\n","0 -135 -106 -138  -72 -413  ...    7 -213  -25  -72   -4   15 -318  -32 -124   \n","1 -114 -125  -85 -144 -260  ... -100 -252  -20 -139 -116 -114 -192  -49  -79   \n","2  265  -76  215  238    7  ...  -57  136  124   -1 -125    2  -95   49  -37   \n","3   12  168   71   55   -2  ...  132  318  325  392  241  193  312  230  330   \n","4 -419 -230 -272 -399 -541  ... -377 -209 -396 -324 -191  -51 -139 -367 -188   \n","\n","    33  \n","0 -135  \n","1 -186  \n","2  -70  \n","3  337  \n","4 -407  \n","\n","[5 rows x 40 columns]\n","                      Gene Description Gene Accession Number   39   40   42  \\\n","0  AFFX-BioB-5_at (endogenous control)        AFFX-BioB-5_at -342  -87   22   \n","1  AFFX-BioB-M_at (endogenous control)        AFFX-BioB-M_at -200 -248 -153   \n","2  AFFX-BioB-3_at (endogenous control)        AFFX-BioB-3_at   41  262   17   \n","3  AFFX-BioC-5_at (endogenous control)        AFFX-BioC-5_at  328  295  276   \n","4  AFFX-BioC-3_at (endogenous control)        AFFX-BioC-3_at -224 -226 -211   \n","\n","    47   48   49   41   43  ...   54   57   58   60   61   65   66   63   64  \\\n","0 -243 -130 -256  -62   86  ...  -90 -137 -157 -172  -47  -62  -58 -161  -48   \n","1 -218 -177 -249  -23  -36  ...  -87  -51 -370 -122 -442 -198 -217 -215 -531   \n","2 -163  -28 -410   -7 -141  ...  102  -82  -77   38  -21   -5   63  -46 -124   \n","3  182  266   24  142  252  ...  319  178  340   31  396  141   95  146  431   \n","4 -289 -170 -535 -233 -201  ... -283 -135 -438 -201 -351 -256 -191 -172 -496   \n","\n","    62  \n","0 -176  \n","1 -284  \n","2  -81  \n","3    9  \n","4 -294  \n","\n","[5 rows x 36 columns]\n"]}],"source":["print(train.head())\n","print(test.head())"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1719807042860,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"},"user_tz":-180},"id":"BxqXXbne-15C","outputId":"6e7e42ee-0592-449b-e8e1-6f37a5eb7e60","collapsed":true},"outputs":[{"output_type":"stream","name":"stdout","text":["train Information:\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 7129 entries, 0 to 7128\n","Data columns (total 40 columns):\n"," #   Column                 Non-Null Count  Dtype \n","---  ------                 --------------  ----- \n"," 0   Gene Description       7129 non-null   object\n"," 1   Gene Accession Number  7129 non-null   object\n"," 2   1                      7129 non-null   int64 \n"," 3   2                      7129 non-null   int64 \n"," 4   3                      7129 non-null   int64 \n"," 5   4                      7129 non-null   int64 \n"," 6   5                      7129 non-null   int64 \n"," 7   6                      7129 non-null   int64 \n"," 8   7                      7129 non-null   int64 \n"," 9   8                      7129 non-null   int64 \n"," 10  9                      7129 non-null   int64 \n"," 11  10                     7129 non-null   int64 \n"," 12  11                     7129 non-null   int64 \n"," 13  12                     7129 non-null   int64 \n"," 14  13                     7129 non-null   int64 \n"," 15  14                     7129 non-null   int64 \n"," 16  15                     7129 non-null   int64 \n"," 17  16                     7129 non-null   int64 \n"," 18  17                     7129 non-null   int64 \n"," 19  18                     7129 non-null   int64 \n"," 20  19                     7129 non-null   int64 \n"," 21  20                     7129 non-null   int64 \n"," 22  21                     7129 non-null   int64 \n"," 23  22                     7129 non-null   int64 \n"," 24  23                     7129 non-null   int64 \n"," 25  24                     7129 non-null   int64 \n"," 26  25                     7129 non-null   int64 \n"," 27  26                     7129 non-null   int64 \n"," 28  27                     7129 non-null   int64 \n"," 29  34                     7129 non-null   int64 \n"," 30  35                     7129 non-null   int64 \n"," 31  36                     7129 non-null   int64 \n"," 32  37                     7129 non-null   int64 \n"," 33  38                     7129 non-null   int64 \n"," 34  28                     7129 non-null   int64 \n"," 35  29                     7129 non-null   int64 \n"," 36  30                     7129 non-null   int64 \n"," 37  31                     7129 non-null   int64 \n"," 38  32                     7129 non-null   int64 \n"," 39  33                     7129 non-null   int64 \n","dtypes: int64(38), object(2)\n","memory usage: 2.2+ MB\n","None\n","\n","test Statistics:\n","                 39            40            42            47            48  \\\n","count   7129.000000   7129.000000   7129.000000   7129.000000   7129.000000   \n","mean     582.194978    527.819329    603.813719    576.027213    751.464862   \n","std     2473.986881   2304.800191   2377.775459   2436.848381   2437.815002   \n","min   -21984.000000 -21296.000000 -10481.000000  -7861.000000 -16945.000000   \n","25%      -33.000000    -36.000000    -17.000000     -8.000000     -6.000000   \n","50%      125.000000    124.000000    116.000000    126.000000    158.000000   \n","75%      439.000000    424.000000    420.000000    374.000000    577.000000   \n","max    45815.000000  29136.000000  37529.000000  43221.000000  25231.000000   \n","\n","                 49            41            43            44            45  \\\n","count   7129.000000   7129.000000   7129.000000   7129.000000   7129.000000   \n","mean     601.516763    565.152476    563.614252    531.401599    530.194137   \n","std     2432.454360   2352.036107   2521.409254   2335.848476   2368.906095   \n","min   -26775.000000  -7764.000000 -13905.000000  -9619.000000  -5353.000000   \n","25%      -65.000000     -7.000000    -21.000000    -45.000000    -59.000000   \n","50%      139.000000     93.000000    110.000000     74.000000     78.000000   \n","75%      552.000000    342.000000    372.000000    321.000000    327.000000   \n","max    29500.000000  31076.000000  49432.000000  35402.000000  34741.000000   \n","\n","       ...           54            57            58            60  \\\n","count  ...   7129.00000   7129.000000   7129.000000   7129.000000   \n","mean   ...    668.70122    497.195820    561.964371    561.004629   \n","std    ...   2505.06701   2436.468032   2688.424072   2615.321812   \n","min    ... -11978.00000 -11067.000000 -16131.000000  -9338.000000   \n","25%    ...    -10.00000    -27.000000    -49.000000    -19.000000   \n","50%    ...    151.00000     82.000000    129.000000     98.000000   \n","75%    ...    469.00000    296.000000    435.000000    321.000000   \n","max    ...  35742.00000  38690.000000  59647.000000  40792.000000   \n","\n","                 61            65            66            63            64  \\\n","count   7129.000000   7129.000000   7129.000000   7129.000000   7129.000000   \n","mean     581.006593    556.054145    530.495020    727.593351    686.850610   \n","std     2467.740997   2360.238246   2463.108827   2488.340963   2703.734409   \n","min   -16268.000000 -14244.000000  -7626.000000 -20782.000000 -26258.000000   \n","25%      -36.000000    -31.000000    -15.000000    -21.000000    -51.000000   \n","50%      117.000000     99.000000     73.000000    162.000000    195.000000   \n","75%      422.000000    366.000000    280.000000    578.000000    683.000000   \n","max    37374.000000  27447.000000  53204.000000  31585.000000  71369.000000   \n","\n","                62  \n","count   7129.00000  \n","mean     671.16496  \n","std     2659.95898  \n","min   -11973.00000  \n","25%      -20.00000  \n","50%      136.00000  \n","75%      474.00000  \n","max    48374.00000  \n","\n","[8 rows x 34 columns]\n"]}],"source":["print(\"train Information:\")\n","print(train.info())\n","\n","print(\"\\ntest Statistics:\")\n","print(test.describe())\n","\n"]},{"cell_type":"markdown","metadata":{"id":"exxnA8LTXNut"},"source":["Exploratory Data Analysis (EDA):"]},{"cell_type":"markdown","metadata":{"id":"RyxZPNtMiZ4O"},"source":["נבדוק כמה חולי AML וכמה חולי ALL יש לנו בדאטא"]},{"cell_type":"code","source":["print(y.columns)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uPgDGAkZ6A_v","executionInfo":{"status":"ok","timestamp":1719807042860,"user_tz":-180,"elapsed":8,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"c875db84-7734-47d9-9704-1ca046d341d0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['patient', 'cancer'], dtype='object')\n"]}]},{"cell_type":"code","source":["print(y['cancer'].value_counts())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"_8X1L5wt8wBK","executionInfo":{"status":"ok","timestamp":1719807042860,"user_tz":-180,"elapsed":5,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"570dc2fa-6ad7-403c-f6e6-48aa91ad6f6a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["cancer\n","ALL    47\n","AML    25\n","Name: count, dtype: int64\n"]}]},{"cell_type":"code","execution_count":7,"metadata":{"id":"mk9GBlRFbRZR","collapsed":true,"colab":{"base_uri":"https://localhost:8080/","height":472},"executionInfo":{"status":"ok","timestamp":1721030186856,"user_tz":-180,"elapsed":1104,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"17a78db4-f71e-49aa-acf7-b26752323efa"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# EDA for Cancer Mapping\n","sns.countplot(data=y, x='cancer')\n","plt.title('Distribution of Cancer Types')\n","plt.show()\n"]},{"cell_type":"markdown","source":["נעביר את הערכים לערכים נומרים בy"],"metadata":{"id":"wweXT0c783ZW"}},{"cell_type":"code","source":["# Recode label to numeric\n","y = y.replace({'ALL':0,'AML':1})\n","labels = ['ALL', 'AML']"],"metadata":{"id":"08I8XO1f885r","executionInfo":{"status":"ok","timestamp":1721030190327,"user_tz":-180,"elapsed":313,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}}},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":["עכשיו נעבור לנתונים של החולים"],"metadata":{"id":"qmS-PzKS9Var"}},{"cell_type":"code","source":["print(train.shape)\n","print(test.shape)"],"metadata":{"id":"YAMZsNR99fbF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1719807043486,"user_tz":-180,"elapsed":11,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"a7bdd2db-ba0b-4224-e5ce-33fdf98f3cce"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(7129, 40)\n","(7129, 36)\n"]}]},{"cell_type":"code","source":["train.head()"],"metadata":{"id":"mOX3scqI9rnj","colab":{"base_uri":"https://localhost:8080/","height":235},"executionInfo":{"status":"ok","timestamp":1719807043487,"user_tz":-180,"elapsed":10,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"98e1220b-f186-4d6e-bd24-d629eaa47f97"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                      Gene Description Gene Accession Number    1    2    3  \\\n","0  AFFX-BioB-5_at (endogenous control)        AFFX-BioB-5_at -214 -139  -76   \n","1  AFFX-BioB-M_at (endogenous control)        AFFX-BioB-M_at -153  -73  -49   \n","2  AFFX-BioB-3_at (endogenous control)        AFFX-BioB-3_at  -58   -1 -307   \n","3  AFFX-BioC-5_at (endogenous control)        AFFX-BioC-5_at   88  283  309   \n","4  AFFX-BioC-3_at (endogenous control)        AFFX-BioC-3_at -295 -264 -376   \n","\n","     4    5    6    7    8  ...   35   36   37   38   28   29   30   31   32  \\\n","0 -135 -106 -138  -72 -413  ...    7 -213  -25  -72   -4   15 -318  -32 -124   \n","1 -114 -125  -85 -144 -260  ... -100 -252  -20 -139 -116 -114 -192  -49  -79   \n","2  265  -76  215  238    7  ...  -57  136  124   -1 -125    2  -95   49  -37   \n","3   12  168   71   55   -2  ...  132  318  325  392  241  193  312  230  330   \n","4 -419 -230 -272 -399 -541  ... -377 -209 -396 -324 -191  -51 -139 -367 -188   \n","\n","    33  \n","0 -135  \n","1 -186  \n","2  -70  \n","3  337  \n","4 -407  \n","\n","[5 rows x 40 columns]"],"text/html":["\n","  <div id=\"df-f0d57047-78fb-40b6-9740-51e701fc8b1d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gene Description</th>\n","      <th>Gene Accession Number</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>...</th>\n","      <th>35</th>\n","      <th>36</th>\n","      <th>37</th>\n","      <th>38</th>\n","      <th>28</th>\n","      <th>29</th>\n","      <th>30</th>\n","      <th>31</th>\n","      <th>32</th>\n","      <th>33</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>AFFX-BioB-5_at (endogenous control)</td>\n","      <td>AFFX-BioB-5_at</td>\n","      <td>-214</td>\n","      <td>-139</td>\n","      <td>-76</td>\n","      <td>-135</td>\n","      <td>-106</td>\n","      <td>-138</td>\n","      <td>-72</td>\n","      <td>-413</td>\n","      <td>...</td>\n","      <td>7</td>\n","      <td>-213</td>\n","      <td>-25</td>\n","      <td>-72</td>\n","      <td>-4</td>\n","      <td>15</td>\n","      <td>-318</td>\n","      <td>-32</td>\n","      <td>-124</td>\n","      <td>-135</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>AFFX-BioB-M_at (endogenous control)</td>\n","      <td>AFFX-BioB-M_at</td>\n","      <td>-153</td>\n","      <td>-73</td>\n","      <td>-49</td>\n","      <td>-114</td>\n","      <td>-125</td>\n","      <td>-85</td>\n","      <td>-144</td>\n","      <td>-260</td>\n","      <td>...</td>\n","      <td>-100</td>\n","      <td>-252</td>\n","      <td>-20</td>\n","      <td>-139</td>\n","      <td>-116</td>\n","      <td>-114</td>\n","      <td>-192</td>\n","      <td>-49</td>\n","      <td>-79</td>\n","      <td>-186</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>AFFX-BioB-3_at (endogenous control)</td>\n","      <td>AFFX-BioB-3_at</td>\n","      <td>-58</td>\n","      <td>-1</td>\n","      <td>-307</td>\n","      <td>265</td>\n","      <td>-76</td>\n","      <td>215</td>\n","      <td>238</td>\n","      <td>7</td>\n","      <td>...</td>\n","      <td>-57</td>\n","      <td>136</td>\n","      <td>124</td>\n","      <td>-1</td>\n","      <td>-125</td>\n","      <td>2</td>\n","      <td>-95</td>\n","      <td>49</td>\n","      <td>-37</td>\n","      <td>-70</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>AFFX-BioC-5_at (endogenous control)</td>\n","      <td>AFFX-BioC-5_at</td>\n","      <td>88</td>\n","      <td>283</td>\n","      <td>309</td>\n","      <td>12</td>\n","      <td>168</td>\n","      <td>71</td>\n","      <td>55</td>\n","      <td>-2</td>\n","      <td>...</td>\n","      <td>132</td>\n","      <td>318</td>\n","      <td>325</td>\n","      <td>392</td>\n","      <td>241</td>\n","      <td>193</td>\n","      <td>312</td>\n","      <td>230</td>\n","      <td>330</td>\n","      <td>337</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>AFFX-BioC-3_at (endogenous control)</td>\n","      <td>AFFX-BioC-3_at</td>\n","      <td>-295</td>\n","      <td>-264</td>\n","      <td>-376</td>\n","      <td>-419</td>\n","      <td>-230</td>\n","      <td>-272</td>\n","      <td>-399</td>\n","      <td>-541</td>\n","      <td>...</td>\n","      <td>-377</td>\n","      <td>-209</td>\n","      <td>-396</td>\n","      <td>-324</td>\n","      <td>-191</td>\n","      <td>-51</td>\n","      <td>-139</td>\n","      <td>-367</td>\n","      <td>-188</td>\n","      <td>-407</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 40 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f0d57047-78fb-40b6-9740-51e701fc8b1d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f0d57047-78fb-40b6-9740-51e701fc8b1d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f0d57047-78fb-40b6-9740-51e701fc8b1d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-76fc8a05-a75b-4fea-a7f0-b70e0fa72cb7\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-76fc8a05-a75b-4fea-a7f0-b70e0fa72cb7')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-76fc8a05-a75b-4fea-a7f0-b70e0fa72cb7 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train"}},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["test.head()"],"metadata":{"id":"dhhRgGJv9vAz","colab":{"base_uri":"https://localhost:8080/","height":235},"executionInfo":{"status":"ok","timestamp":1719807043487,"user_tz":-180,"elapsed":9,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"d4b4e950-041a-4c8d-b3f9-b6608f469f47"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                      Gene Description Gene Accession Number   39   40   42  \\\n","0  AFFX-BioB-5_at (endogenous control)        AFFX-BioB-5_at -342  -87   22   \n","1  AFFX-BioB-M_at (endogenous control)        AFFX-BioB-M_at -200 -248 -153   \n","2  AFFX-BioB-3_at (endogenous control)        AFFX-BioB-3_at   41  262   17   \n","3  AFFX-BioC-5_at (endogenous control)        AFFX-BioC-5_at  328  295  276   \n","4  AFFX-BioC-3_at (endogenous control)        AFFX-BioC-3_at -224 -226 -211   \n","\n","    47   48   49   41   43  ...   54   57   58   60   61   65   66   63   64  \\\n","0 -243 -130 -256  -62   86  ...  -90 -137 -157 -172  -47  -62  -58 -161  -48   \n","1 -218 -177 -249  -23  -36  ...  -87  -51 -370 -122 -442 -198 -217 -215 -531   \n","2 -163  -28 -410   -7 -141  ...  102  -82  -77   38  -21   -5   63  -46 -124   \n","3  182  266   24  142  252  ...  319  178  340   31  396  141   95  146  431   \n","4 -289 -170 -535 -233 -201  ... -283 -135 -438 -201 -351 -256 -191 -172 -496   \n","\n","    62  \n","0 -176  \n","1 -284  \n","2  -81  \n","3    9  \n","4 -294  \n","\n","[5 rows x 36 columns]"],"text/html":["\n","  <div id=\"df-d9393ea3-cf27-45cc-96c3-6df308ebef3a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gene Description</th>\n","      <th>Gene Accession Number</th>\n","      <th>39</th>\n","      <th>40</th>\n","      <th>42</th>\n","      <th>47</th>\n","      <th>48</th>\n","      <th>49</th>\n","      <th>41</th>\n","      <th>43</th>\n","      <th>...</th>\n","      <th>54</th>\n","      <th>57</th>\n","      <th>58</th>\n","      <th>60</th>\n","      <th>61</th>\n","      <th>65</th>\n","      <th>66</th>\n","      <th>63</th>\n","      <th>64</th>\n","      <th>62</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>AFFX-BioB-5_at (endogenous control)</td>\n","      <td>AFFX-BioB-5_at</td>\n","      <td>-342</td>\n","      <td>-87</td>\n","      <td>22</td>\n","      <td>-243</td>\n","      <td>-130</td>\n","      <td>-256</td>\n","      <td>-62</td>\n","      <td>86</td>\n","      <td>...</td>\n","      <td>-90</td>\n","      <td>-137</td>\n","      <td>-157</td>\n","      <td>-172</td>\n","      <td>-47</td>\n","      <td>-62</td>\n","      <td>-58</td>\n","      <td>-161</td>\n","      <td>-48</td>\n","      <td>-176</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>AFFX-BioB-M_at (endogenous control)</td>\n","      <td>AFFX-BioB-M_at</td>\n","      <td>-200</td>\n","      <td>-248</td>\n","      <td>-153</td>\n","      <td>-218</td>\n","      <td>-177</td>\n","      <td>-249</td>\n","      <td>-23</td>\n","      <td>-36</td>\n","      <td>...</td>\n","      <td>-87</td>\n","      <td>-51</td>\n","      <td>-370</td>\n","      <td>-122</td>\n","      <td>-442</td>\n","      <td>-198</td>\n","      <td>-217</td>\n","      <td>-215</td>\n","      <td>-531</td>\n","      <td>-284</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>AFFX-BioB-3_at (endogenous control)</td>\n","      <td>AFFX-BioB-3_at</td>\n","      <td>41</td>\n","      <td>262</td>\n","      <td>17</td>\n","      <td>-163</td>\n","      <td>-28</td>\n","      <td>-410</td>\n","      <td>-7</td>\n","      <td>-141</td>\n","      <td>...</td>\n","      <td>102</td>\n","      <td>-82</td>\n","      <td>-77</td>\n","      <td>38</td>\n","      <td>-21</td>\n","      <td>-5</td>\n","      <td>63</td>\n","      <td>-46</td>\n","      <td>-124</td>\n","      <td>-81</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>AFFX-BioC-5_at (endogenous control)</td>\n","      <td>AFFX-BioC-5_at</td>\n","      <td>328</td>\n","      <td>295</td>\n","      <td>276</td>\n","      <td>182</td>\n","      <td>266</td>\n","      <td>24</td>\n","      <td>142</td>\n","      <td>252</td>\n","      <td>...</td>\n","      <td>319</td>\n","      <td>178</td>\n","      <td>340</td>\n","      <td>31</td>\n","      <td>396</td>\n","      <td>141</td>\n","      <td>95</td>\n","      <td>146</td>\n","      <td>431</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>AFFX-BioC-3_at (endogenous control)</td>\n","      <td>AFFX-BioC-3_at</td>\n","      <td>-224</td>\n","      <td>-226</td>\n","      <td>-211</td>\n","      <td>-289</td>\n","      <td>-170</td>\n","      <td>-535</td>\n","      <td>-233</td>\n","      <td>-201</td>\n","      <td>...</td>\n","      <td>-283</td>\n","      <td>-135</td>\n","      <td>-438</td>\n","      <td>-201</td>\n","      <td>-351</td>\n","      <td>-256</td>\n","      <td>-191</td>\n","      <td>-172</td>\n","      <td>-496</td>\n","      <td>-294</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 36 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d9393ea3-cf27-45cc-96c3-6df308ebef3a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d9393ea3-cf27-45cc-96c3-6df308ebef3a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d9393ea3-cf27-45cc-96c3-6df308ebef3a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-232aad57-91e6-4e36-a06f-23e436be1484\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-232aad57-91e6-4e36-a06f-23e436be1484')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-232aad57-91e6-4e36-a06f-23e436be1484 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"test"}},"metadata":{},"execution_count":16}]},{"cell_type":"markdown","source":["השמות של העמודות לא בסדר מספרי, נסדר אותם"],"metadata":{"id":"arGMKvTa_e3U"}},{"cell_type":"code","source":["train_columns_titles = ['Gene Description', 'Gene Accession Number', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10',\n","       '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25',\n","       '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38']\n","\n","train =train.reindex(columns=train_columns_titles)"],"metadata":{"id":"at5XhUVD_kHw","executionInfo":{"status":"ok","timestamp":1721030200059,"user_tz":-180,"elapsed":307,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["train.head()"],"metadata":{"collapsed":true,"id":"ufm8sWEdCPFg","colab":{"base_uri":"https://localhost:8080/","height":235},"executionInfo":{"status":"ok","timestamp":1719807044116,"user_tz":-180,"elapsed":635,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"62d453d4-1d43-485c-9ec2-91b0a9bb4011"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                      Gene Description Gene Accession Number    1    2    3  \\\n","0  AFFX-BioB-5_at (endogenous control)        AFFX-BioB-5_at -214 -139  -76   \n","1  AFFX-BioB-M_at (endogenous control)        AFFX-BioB-M_at -153  -73  -49   \n","2  AFFX-BioB-3_at (endogenous control)        AFFX-BioB-3_at  -58   -1 -307   \n","3  AFFX-BioC-5_at (endogenous control)        AFFX-BioC-5_at   88  283  309   \n","4  AFFX-BioC-3_at (endogenous control)        AFFX-BioC-3_at -295 -264 -376   \n","\n","     4    5    6    7    8  ...   29   30   31   32   33   34   35   36   37  \\\n","0 -135 -106 -138  -72 -413  ...   15 -318  -32 -124 -135  -20    7 -213  -25   \n","1 -114 -125  -85 -144 -260  ... -114 -192  -49  -79 -186 -207 -100 -252  -20   \n","2  265  -76  215  238    7  ...    2  -95   49  -37  -70  -50  -57  136  124   \n","3   12  168   71   55   -2  ...  193  312  230  330  337  101  132  318  325   \n","4 -419 -230 -272 -399 -541  ...  -51 -139 -367 -188 -407 -369 -377 -209 -396   \n","\n","    38  \n","0  -72  \n","1 -139  \n","2   -1  \n","3  392  \n","4 -324  \n","\n","[5 rows x 40 columns]"],"text/html":["\n","  <div id=\"df-d94b65a3-9818-4750-988a-8645c1bd5831\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gene Description</th>\n","      <th>Gene Accession Number</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>...</th>\n","      <th>29</th>\n","      <th>30</th>\n","      <th>31</th>\n","      <th>32</th>\n","      <th>33</th>\n","      <th>34</th>\n","      <th>35</th>\n","      <th>36</th>\n","      <th>37</th>\n","      <th>38</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>AFFX-BioB-5_at (endogenous control)</td>\n","      <td>AFFX-BioB-5_at</td>\n","      <td>-214</td>\n","      <td>-139</td>\n","      <td>-76</td>\n","      <td>-135</td>\n","      <td>-106</td>\n","      <td>-138</td>\n","      <td>-72</td>\n","      <td>-413</td>\n","      <td>...</td>\n","      <td>15</td>\n","      <td>-318</td>\n","      <td>-32</td>\n","      <td>-124</td>\n","      <td>-135</td>\n","      <td>-20</td>\n","      <td>7</td>\n","      <td>-213</td>\n","      <td>-25</td>\n","      <td>-72</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>AFFX-BioB-M_at (endogenous control)</td>\n","      <td>AFFX-BioB-M_at</td>\n","      <td>-153</td>\n","      <td>-73</td>\n","      <td>-49</td>\n","      <td>-114</td>\n","      <td>-125</td>\n","      <td>-85</td>\n","      <td>-144</td>\n","      <td>-260</td>\n","      <td>...</td>\n","      <td>-114</td>\n","      <td>-192</td>\n","      <td>-49</td>\n","      <td>-79</td>\n","      <td>-186</td>\n","      <td>-207</td>\n","      <td>-100</td>\n","      <td>-252</td>\n","      <td>-20</td>\n","      <td>-139</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>AFFX-BioB-3_at (endogenous control)</td>\n","      <td>AFFX-BioB-3_at</td>\n","      <td>-58</td>\n","      <td>-1</td>\n","      <td>-307</td>\n","      <td>265</td>\n","      <td>-76</td>\n","      <td>215</td>\n","      <td>238</td>\n","      <td>7</td>\n","      <td>...</td>\n","      <td>2</td>\n","      <td>-95</td>\n","      <td>49</td>\n","      <td>-37</td>\n","      <td>-70</td>\n","      <td>-50</td>\n","      <td>-57</td>\n","      <td>136</td>\n","      <td>124</td>\n","      <td>-1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>AFFX-BioC-5_at (endogenous control)</td>\n","      <td>AFFX-BioC-5_at</td>\n","      <td>88</td>\n","      <td>283</td>\n","      <td>309</td>\n","      <td>12</td>\n","      <td>168</td>\n","      <td>71</td>\n","      <td>55</td>\n","      <td>-2</td>\n","      <td>...</td>\n","      <td>193</td>\n","      <td>312</td>\n","      <td>230</td>\n","      <td>330</td>\n","      <td>337</td>\n","      <td>101</td>\n","      <td>132</td>\n","      <td>318</td>\n","      <td>325</td>\n","      <td>392</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>AFFX-BioC-3_at (endogenous control)</td>\n","      <td>AFFX-BioC-3_at</td>\n","      <td>-295</td>\n","      <td>-264</td>\n","      <td>-376</td>\n","      <td>-419</td>\n","      <td>-230</td>\n","      <td>-272</td>\n","      <td>-399</td>\n","      <td>-541</td>\n","      <td>...</td>\n","      <td>-51</td>\n","      <td>-139</td>\n","      <td>-367</td>\n","      <td>-188</td>\n","      <td>-407</td>\n","      <td>-369</td>\n","      <td>-377</td>\n","      <td>-209</td>\n","      <td>-396</td>\n","      <td>-324</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 40 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d94b65a3-9818-4750-988a-8645c1bd5831')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d94b65a3-9818-4750-988a-8645c1bd5831 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d94b65a3-9818-4750-988a-8645c1bd5831');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-bc6cea2a-72e3-4b00-b43d-37b8094443bf\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bc6cea2a-72e3-4b00-b43d-37b8094443bf')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-bc6cea2a-72e3-4b00-b43d-37b8094443bf button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train"}},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["test_columns_titles = ['Gene Description', 'Gene Accession Number','39', '40', '41', '42', '43', '44', '45', '46',\n","       '47', '48', '49', '50', '51', '52', '53',  '54', '55', '56', '57', '58', '59',\n","       '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72']\n","\n","test = test.reindex(columns=test_columns_titles)"],"metadata":{"id":"P1M6jtJrCYtn","executionInfo":{"status":"ok","timestamp":1721030207835,"user_tz":-180,"elapsed":494,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["test.head()"],"metadata":{"collapsed":true,"id":"cDgxvaJLCd2y","colab":{"base_uri":"https://localhost:8080/","height":235},"executionInfo":{"status":"ok","timestamp":1719807044117,"user_tz":-180,"elapsed":12,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"84aa322b-d008-445d-9a26-737bc81ba7bc"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                      Gene Description Gene Accession Number   39   40   41  \\\n","0  AFFX-BioB-5_at (endogenous control)        AFFX-BioB-5_at -342  -87  -62   \n","1  AFFX-BioB-M_at (endogenous control)        AFFX-BioB-M_at -200 -248  -23   \n","2  AFFX-BioB-3_at (endogenous control)        AFFX-BioB-3_at   41  262   -7   \n","3  AFFX-BioC-5_at (endogenous control)        AFFX-BioC-5_at  328  295  142   \n","4  AFFX-BioC-3_at (endogenous control)        AFFX-BioC-3_at -224 -226 -233   \n","\n","    42   43   44   45   46  ...   63   64   65   66   67   68   69   70   71  \\\n","0   22   86 -146 -187  -56  ... -161  -48  -62  -58  -76 -154  -79  -55  -59   \n","1 -153  -36  -74 -187  -43  ... -215 -531 -198 -217  -98 -136 -118  -44 -114   \n","2   17 -141  170  312   43  ...  -46 -124   -5   63 -153   49  -30   12   23   \n","3  276  252  174  142  177  ...  146  431  141   95  237  180   68  129  146   \n","4 -211 -201  -32  114 -116  ... -172 -496 -256 -191 -215 -257 -110 -108 -171   \n","\n","    72  \n","0 -131  \n","1 -126  \n","2  -50  \n","3  211  \n","4 -206  \n","\n","[5 rows x 36 columns]"],"text/html":["\n","  <div id=\"df-53303c83-5565-4ce4-8fae-32a3d90be1a2\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gene Description</th>\n","      <th>Gene Accession Number</th>\n","      <th>39</th>\n","      <th>40</th>\n","      <th>41</th>\n","      <th>42</th>\n","      <th>43</th>\n","      <th>44</th>\n","      <th>45</th>\n","      <th>46</th>\n","      <th>...</th>\n","      <th>63</th>\n","      <th>64</th>\n","      <th>65</th>\n","      <th>66</th>\n","      <th>67</th>\n","      <th>68</th>\n","      <th>69</th>\n","      <th>70</th>\n","      <th>71</th>\n","      <th>72</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>AFFX-BioB-5_at (endogenous control)</td>\n","      <td>AFFX-BioB-5_at</td>\n","      <td>-342</td>\n","      <td>-87</td>\n","      <td>-62</td>\n","      <td>22</td>\n","      <td>86</td>\n","      <td>-146</td>\n","      <td>-187</td>\n","      <td>-56</td>\n","      <td>...</td>\n","      <td>-161</td>\n","      <td>-48</td>\n","      <td>-62</td>\n","      <td>-58</td>\n","      <td>-76</td>\n","      <td>-154</td>\n","      <td>-79</td>\n","      <td>-55</td>\n","      <td>-59</td>\n","      <td>-131</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>AFFX-BioB-M_at (endogenous control)</td>\n","      <td>AFFX-BioB-M_at</td>\n","      <td>-200</td>\n","      <td>-248</td>\n","      <td>-23</td>\n","      <td>-153</td>\n","      <td>-36</td>\n","      <td>-74</td>\n","      <td>-187</td>\n","      <td>-43</td>\n","      <td>...</td>\n","      <td>-215</td>\n","      <td>-531</td>\n","      <td>-198</td>\n","      <td>-217</td>\n","      <td>-98</td>\n","      <td>-136</td>\n","      <td>-118</td>\n","      <td>-44</td>\n","      <td>-114</td>\n","      <td>-126</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>AFFX-BioB-3_at (endogenous control)</td>\n","      <td>AFFX-BioB-3_at</td>\n","      <td>41</td>\n","      <td>262</td>\n","      <td>-7</td>\n","      <td>17</td>\n","      <td>-141</td>\n","      <td>170</td>\n","      <td>312</td>\n","      <td>43</td>\n","      <td>...</td>\n","      <td>-46</td>\n","      <td>-124</td>\n","      <td>-5</td>\n","      <td>63</td>\n","      <td>-153</td>\n","      <td>49</td>\n","      <td>-30</td>\n","      <td>12</td>\n","      <td>23</td>\n","      <td>-50</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>AFFX-BioC-5_at (endogenous control)</td>\n","      <td>AFFX-BioC-5_at</td>\n","      <td>328</td>\n","      <td>295</td>\n","      <td>142</td>\n","      <td>276</td>\n","      <td>252</td>\n","      <td>174</td>\n","      <td>142</td>\n","      <td>177</td>\n","      <td>...</td>\n","      <td>146</td>\n","      <td>431</td>\n","      <td>141</td>\n","      <td>95</td>\n","      <td>237</td>\n","      <td>180</td>\n","      <td>68</td>\n","      <td>129</td>\n","      <td>146</td>\n","      <td>211</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>AFFX-BioC-3_at (endogenous control)</td>\n","      <td>AFFX-BioC-3_at</td>\n","      <td>-224</td>\n","      <td>-226</td>\n","      <td>-233</td>\n","      <td>-211</td>\n","      <td>-201</td>\n","      <td>-32</td>\n","      <td>114</td>\n","      <td>-116</td>\n","      <td>...</td>\n","      <td>-172</td>\n","      <td>-496</td>\n","      <td>-256</td>\n","      <td>-191</td>\n","      <td>-215</td>\n","      <td>-257</td>\n","      <td>-110</td>\n","      <td>-108</td>\n","      <td>-171</td>\n","      <td>-206</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 36 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-53303c83-5565-4ce4-8fae-32a3d90be1a2')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-53303c83-5565-4ce4-8fae-32a3d90be1a2 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-53303c83-5565-4ce4-8fae-32a3d90be1a2');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5130324e-58da-4117-be97-1c3b0e728e74\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5130324e-58da-4117-be97-1c3b0e728e74')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5130324e-58da-4117-be97-1c3b0e728e74 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"test"}},"metadata":{},"execution_count":20}]},{"cell_type":"markdown","source":["נחליף בין השורות לעמודות, כדי שהתכונות יהיו בעמודות וזה יקל עלינו לבצע הורדת מימדים ואימון המודל"],"metadata":{"id":"FGY6K-CNIcka"}},{"cell_type":"code","source":["X_train = train.T\n","X_test = test.T\n","\n","print(X_train.shape)\n","X_train.head()"],"metadata":{"id":"bLeL1ed9Iiqz","colab":{"base_uri":"https://localhost:8080/","height":394},"executionInfo":{"status":"ok","timestamp":1721030211045,"user_tz":-180,"elapsed":526,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"8a8de13f-1f4f-49cb-ef7d-b071642590ac","collapsed":true},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["(40, 7129)\n"]},{"output_type":"execute_result","data":{"text/plain":["                                                      0     \\\n","Gene Description       AFFX-BioB-5_at (endogenous control)   \n","Gene Accession Number                       AFFX-BioB-5_at   \n","1                                                     -214   \n","2                                                     -139   \n","3                                                      -76   \n","\n","                                                      1     \\\n","Gene Description       AFFX-BioB-M_at (endogenous control)   \n","Gene Accession Number                       AFFX-BioB-M_at   \n","1                                                     -153   \n","2                                                      -73   \n","3                                                      -49   \n","\n","                                                      2     \\\n","Gene Description       AFFX-BioB-3_at (endogenous control)   \n","Gene Accession Number                       AFFX-BioB-3_at   \n","1                                                      -58   \n","2                                                       -1   \n","3                                                     -307   \n","\n","                                                      3     \\\n","Gene Description       AFFX-BioC-5_at (endogenous control)   \n","Gene Accession Number                       AFFX-BioC-5_at   \n","1                                                       88   \n","2                                                      283   \n","3                                                      309   \n","\n","                                                      4     \\\n","Gene Description       AFFX-BioC-3_at (endogenous control)   \n","Gene Accession Number                       AFFX-BioC-3_at   \n","1                                                     -295   \n","2                                                     -264   \n","3                                                     -376   \n","\n","                                                       5     \\\n","Gene Description       AFFX-BioDn-5_at (endogenous control)   \n","Gene Accession Number                       AFFX-BioDn-5_at   \n","1                                                      -558   \n","2                                                      -400   \n","3                                                      -650   \n","\n","                                                       6     \\\n","Gene Description       AFFX-BioDn-3_at (endogenous control)   \n","Gene Accession Number                       AFFX-BioDn-3_at   \n","1                                                       199   \n","2                                                      -330   \n","3                                                        33   \n","\n","                                                      7     \\\n","Gene Description       AFFX-CreX-5_at (endogenous control)   \n","Gene Accession Number                       AFFX-CreX-5_at   \n","1                                                     -176   \n","2                                                     -168   \n","3                                                     -367   \n","\n","                                                      8     \\\n","Gene Description       AFFX-CreX-3_at (endogenous control)   \n","Gene Accession Number                       AFFX-CreX-3_at   \n","1                                                      252   \n","2                                                      101   \n","3                                                      206   \n","\n","                                                      9     ...  \\\n","Gene Description       AFFX-BioB-5_st (endogenous control)  ...   \n","Gene Accession Number                       AFFX-BioB-5_st  ...   \n","1                                                      206  ...   \n","2                                                       74  ...   \n","3                                                     -215  ...   \n","\n","                                                            7119  \\\n","Gene Description       Transcription factor Stat5b (stat5b) mRNA   \n","Gene Accession Number                                  U48730_at   \n","1                                                            185   \n","2                                                            169   \n","3                                                            315   \n","\n","                                                      7120  \\\n","Gene Description       Breast epithelial antigen BA46 mRNA   \n","Gene Accession Number                            U58516_at   \n","1                                                      511   \n","2                                                      837   \n","3                                                     1199   \n","\n","                                                                    7121  \\\n","Gene Description       GB DEF = Calcium/calmodulin-dependent protein ...   \n","Gene Accession Number                                          U73738_at   \n","1                                                                   -125   \n","2                                                                    -36   \n","3                                                                     33   \n","\n","                                        7122  \\\n","Gene Description       TUBULIN ALPHA-4 CHAIN   \n","Gene Accession Number              X06956_at   \n","1                                        389   \n","2                                        442   \n","3                                        168   \n","\n","                                                                    7123  \\\n","Gene Description       CYP4B1 Cytochrome P450; subfamily IVB; polypep...   \n","Gene Accession Number                                          X16699_at   \n","1                                                                    -37   \n","2                                                                    -17   \n","3                                                                     52   \n","\n","                                                                    7124  \\\n","Gene Description       PTGER3 Prostaglandin E receptor 3 (subtype EP3...   \n","Gene Accession Number                                          X83863_at   \n","1                                                                    793   \n","2                                                                    782   \n","3                                                                   1138   \n","\n","                                                                    7125  \\\n","Gene Description       HMG2 High-mobility group (nonhistone chromosom...   \n","Gene Accession Number                                          Z17240_at   \n","1                                                                    329   \n","2                                                                    295   \n","3                                                                    777   \n","\n","                                                                7126  \\\n","Gene Description       RB1 Retinoblastoma 1 (including osteosarcoma)   \n","Gene Accession Number                                    L49218_f_at   \n","1                                                                 36   \n","2                                                                 11   \n","3                                                                 41   \n","\n","                                                                    7127  \\\n","Gene Description       GB DEF = Glycophorin Sta (type A) exons 3 and ...   \n","Gene Accession Number                                        M71243_f_at   \n","1                                                                    191   \n","2                                                                     76   \n","3                                                                    228   \n","\n","                                            7128  \n","Gene Description       GB DEF = mRNA (clone 1A7)  \n","Gene Accession Number                Z78285_f_at  \n","1                                            -37  \n","2                                            -14  \n","3                                            -41  \n","\n","[5 rows x 7129 columns]"],"text/html":["\n","  <div id=\"df-af580dd8-877a-44ce-8682-60da0be127aa\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>...</th>\n","      <th>7119</th>\n","      <th>7120</th>\n","      <th>7121</th>\n","      <th>7122</th>\n","      <th>7123</th>\n","      <th>7124</th>\n","      <th>7125</th>\n","      <th>7126</th>\n","      <th>7127</th>\n","      <th>7128</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Gene Description</th>\n","      <td>AFFX-BioB-5_at (endogenous control)</td>\n","      <td>AFFX-BioB-M_at (endogenous control)</td>\n","      <td>AFFX-BioB-3_at (endogenous control)</td>\n","      <td>AFFX-BioC-5_at (endogenous control)</td>\n","      <td>AFFX-BioC-3_at (endogenous control)</td>\n","      <td>AFFX-BioDn-5_at (endogenous control)</td>\n","      <td>AFFX-BioDn-3_at (endogenous control)</td>\n","      <td>AFFX-CreX-5_at (endogenous control)</td>\n","      <td>AFFX-CreX-3_at (endogenous control)</td>\n","      <td>AFFX-BioB-5_st (endogenous control)</td>\n","      <td>...</td>\n","      <td>Transcription factor Stat5b (stat5b) mRNA</td>\n","      <td>Breast epithelial antigen BA46 mRNA</td>\n","      <td>GB DEF = Calcium/calmodulin-dependent protein ...</td>\n","      <td>TUBULIN ALPHA-4 CHAIN</td>\n","      <td>CYP4B1 Cytochrome P450; subfamily IVB; polypep...</td>\n","      <td>PTGER3 Prostaglandin E receptor 3 (subtype EP3...</td>\n","      <td>HMG2 High-mobility group (nonhistone chromosom...</td>\n","      <td>RB1 Retinoblastoma 1 (including osteosarcoma)</td>\n","      <td>GB DEF = Glycophorin Sta (type A) exons 3 and ...</td>\n","      <td>GB DEF = mRNA (clone 1A7)</td>\n","    </tr>\n","    <tr>\n","      <th>Gene Accession Number</th>\n","      <td>AFFX-BioB-5_at</td>\n","      <td>AFFX-BioB-M_at</td>\n","      <td>AFFX-BioB-3_at</td>\n","      <td>AFFX-BioC-5_at</td>\n","      <td>AFFX-BioC-3_at</td>\n","      <td>AFFX-BioDn-5_at</td>\n","      <td>AFFX-BioDn-3_at</td>\n","      <td>AFFX-CreX-5_at</td>\n","      <td>AFFX-CreX-3_at</td>\n","      <td>AFFX-BioB-5_st</td>\n","      <td>...</td>\n","      <td>U48730_at</td>\n","      <td>U58516_at</td>\n","      <td>U73738_at</td>\n","      <td>X06956_at</td>\n","      <td>X16699_at</td>\n","      <td>X83863_at</td>\n","      <td>Z17240_at</td>\n","      <td>L49218_f_at</td>\n","      <td>M71243_f_at</td>\n","      <td>Z78285_f_at</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>-214</td>\n","      <td>-153</td>\n","      <td>-58</td>\n","      <td>88</td>\n","      <td>-295</td>\n","      <td>-558</td>\n","      <td>199</td>\n","      <td>-176</td>\n","      <td>252</td>\n","      <td>206</td>\n","      <td>...</td>\n","      <td>185</td>\n","      <td>511</td>\n","      <td>-125</td>\n","      <td>389</td>\n","      <td>-37</td>\n","      <td>793</td>\n","      <td>329</td>\n","      <td>36</td>\n","      <td>191</td>\n","      <td>-37</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-139</td>\n","      <td>-73</td>\n","      <td>-1</td>\n","      <td>283</td>\n","      <td>-264</td>\n","      <td>-400</td>\n","      <td>-330</td>\n","      <td>-168</td>\n","      <td>101</td>\n","      <td>74</td>\n","      <td>...</td>\n","      <td>169</td>\n","      <td>837</td>\n","      <td>-36</td>\n","      <td>442</td>\n","      <td>-17</td>\n","      <td>782</td>\n","      <td>295</td>\n","      <td>11</td>\n","      <td>76</td>\n","      <td>-14</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>-76</td>\n","      <td>-49</td>\n","      <td>-307</td>\n","      <td>309</td>\n","      <td>-376</td>\n","      <td>-650</td>\n","      <td>33</td>\n","      <td>-367</td>\n","      <td>206</td>\n","      <td>-215</td>\n","      <td>...</td>\n","      <td>315</td>\n","      <td>1199</td>\n","      <td>33</td>\n","      <td>168</td>\n","      <td>52</td>\n","      <td>1138</td>\n","      <td>777</td>\n","      <td>41</td>\n","      <td>228</td>\n","      <td>-41</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 7129 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-af580dd8-877a-44ce-8682-60da0be127aa')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-af580dd8-877a-44ce-8682-60da0be127aa button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-af580dd8-877a-44ce-8682-60da0be127aa');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b474606c-0827-41f9-a04f-a2a58009411a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b474606c-0827-41f9-a04f-a2a58009411a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b474606c-0827-41f9-a04f-a2a58009411a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_train"}},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","source":["נהפוך את השורה השנייה לשמות העמודות ונמחק את הראשונה, אני רואה ששתי השורות פשוט כפיליות אחת של השנייה"],"metadata":{"id":"0s7gfoayJ5Yb"}},{"cell_type":"code","source":["# Clean up the column names for training data\n","X_train.columns = X_train.iloc[1]\n","# Set column names of X_train to the values in the second row of X_train.\n","\n","X_train = X_train.drop([\"Gene Description\", \"Gene Accession Number\"]).apply(pd.to_numeric)\n","# Drop columns 'Gene Description' and 'Gene Accession Number' from X_train and convert the remaining columns to numeric.\n","\n","# Clean up the column names for Testing data\n","X_test.columns = X_test.iloc[1]\n","# Set column names of X_test to the values in the second row of X_test.\n","\n","X_test = X_test.drop([\"Gene Description\", \"Gene Accession Number\"]).apply(pd.to_numeric)\n","# Drop columns 'Gene Description' and 'Gene Accession Number' from X_test and convert the remaining columns to numeric.\n","\n","print(X_train.shape)\n","print(X_test.shape)\n","X_train.head()\n","# Print the shape of X_train and X_test and display the first few rows of X_train.\n"],"metadata":{"collapsed":true,"id":"QXGm1Vn4KDcO","colab":{"base_uri":"https://localhost:8080/","height":305},"executionInfo":{"status":"ok","timestamp":1721030223557,"user_tz":-180,"elapsed":5297,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"d70feed8-39c2-44eb-8b41-8141c4f8c69b"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["(38, 7129)\n","(34, 7129)\n"]},{"output_type":"execute_result","data":{"text/plain":["Gene Accession Number  AFFX-BioB-5_at  AFFX-BioB-M_at  AFFX-BioB-3_at  \\\n","1                                -214            -153             -58   \n","2                                -139             -73              -1   \n","3                                 -76             -49            -307   \n","4                                -135            -114             265   \n","5                                -106            -125             -76   \n","\n","Gene Accession Number  AFFX-BioC-5_at  AFFX-BioC-3_at  AFFX-BioDn-5_at  \\\n","1                                  88            -295             -558   \n","2                                 283            -264             -400   \n","3                                 309            -376             -650   \n","4                                  12            -419             -585   \n","5                                 168            -230             -284   \n","\n","Gene Accession Number  AFFX-BioDn-3_at  AFFX-CreX-5_at  AFFX-CreX-3_at  \\\n","1                                  199            -176             252   \n","2                                 -330            -168             101   \n","3                                   33            -367             206   \n","4                                  158            -253              49   \n","5                                    4            -122              70   \n","\n","Gene Accession Number  AFFX-BioB-5_st  ...  U48730_at  U58516_at  U73738_at  \\\n","1                                 206  ...        185        511       -125   \n","2                                  74  ...        169        837        -36   \n","3                                -215  ...        315       1199         33   \n","4                                  31  ...        240        835        218   \n","5                                 252  ...        156        649         57   \n","\n","Gene Accession Number  X06956_at  X16699_at  X83863_at  Z17240_at  \\\n","1                            389        -37        793        329   \n","2                            442        -17        782        295   \n","3                            168         52       1138        777   \n","4                            174       -110        627        170   \n","5                            504        -26        250        314   \n","\n","Gene Accession Number  L49218_f_at  M71243_f_at  Z78285_f_at  \n","1                               36          191          -37  \n","2                               11           76          -14  \n","3                               41          228          -41  \n","4                              -50          126          -91  \n","5                               14           56          -25  \n","\n","[5 rows x 7129 columns]"],"text/html":["\n","  <div id=\"df-f3ece355-ed18-4146-92ab-ddc3c8b1b0dc\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>Gene Accession Number</th>\n","      <th>AFFX-BioB-5_at</th>\n","      <th>AFFX-BioB-M_at</th>\n","      <th>AFFX-BioB-3_at</th>\n","      <th>AFFX-BioC-5_at</th>\n","      <th>AFFX-BioC-3_at</th>\n","      <th>AFFX-BioDn-5_at</th>\n","      <th>AFFX-BioDn-3_at</th>\n","      <th>AFFX-CreX-5_at</th>\n","      <th>AFFX-CreX-3_at</th>\n","      <th>AFFX-BioB-5_st</th>\n","      <th>...</th>\n","      <th>U48730_at</th>\n","      <th>U58516_at</th>\n","      <th>U73738_at</th>\n","      <th>X06956_at</th>\n","      <th>X16699_at</th>\n","      <th>X83863_at</th>\n","      <th>Z17240_at</th>\n","      <th>L49218_f_at</th>\n","      <th>M71243_f_at</th>\n","      <th>Z78285_f_at</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>-214</td>\n","      <td>-153</td>\n","      <td>-58</td>\n","      <td>88</td>\n","      <td>-295</td>\n","      <td>-558</td>\n","      <td>199</td>\n","      <td>-176</td>\n","      <td>252</td>\n","      <td>206</td>\n","      <td>...</td>\n","      <td>185</td>\n","      <td>511</td>\n","      <td>-125</td>\n","      <td>389</td>\n","      <td>-37</td>\n","      <td>793</td>\n","      <td>329</td>\n","      <td>36</td>\n","      <td>191</td>\n","      <td>-37</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-139</td>\n","      <td>-73</td>\n","      <td>-1</td>\n","      <td>283</td>\n","      <td>-264</td>\n","      <td>-400</td>\n","      <td>-330</td>\n","      <td>-168</td>\n","      <td>101</td>\n","      <td>74</td>\n","      <td>...</td>\n","      <td>169</td>\n","      <td>837</td>\n","      <td>-36</td>\n","      <td>442</td>\n","      <td>-17</td>\n","      <td>782</td>\n","      <td>295</td>\n","      <td>11</td>\n","      <td>76</td>\n","      <td>-14</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>-76</td>\n","      <td>-49</td>\n","      <td>-307</td>\n","      <td>309</td>\n","      <td>-376</td>\n","      <td>-650</td>\n","      <td>33</td>\n","      <td>-367</td>\n","      <td>206</td>\n","      <td>-215</td>\n","      <td>...</td>\n","      <td>315</td>\n","      <td>1199</td>\n","      <td>33</td>\n","      <td>168</td>\n","      <td>52</td>\n","      <td>1138</td>\n","      <td>777</td>\n","      <td>41</td>\n","      <td>228</td>\n","      <td>-41</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-135</td>\n","      <td>-114</td>\n","      <td>265</td>\n","      <td>12</td>\n","      <td>-419</td>\n","      <td>-585</td>\n","      <td>158</td>\n","      <td>-253</td>\n","      <td>49</td>\n","      <td>31</td>\n","      <td>...</td>\n","      <td>240</td>\n","      <td>835</td>\n","      <td>218</td>\n","      <td>174</td>\n","      <td>-110</td>\n","      <td>627</td>\n","      <td>170</td>\n","      <td>-50</td>\n","      <td>126</td>\n","      <td>-91</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>-106</td>\n","      <td>-125</td>\n","      <td>-76</td>\n","      <td>168</td>\n","      <td>-230</td>\n","      <td>-284</td>\n","      <td>4</td>\n","      <td>-122</td>\n","      <td>70</td>\n","      <td>252</td>\n","      <td>...</td>\n","      <td>156</td>\n","      <td>649</td>\n","      <td>57</td>\n","      <td>504</td>\n","      <td>-26</td>\n","      <td>250</td>\n","      <td>314</td>\n","      <td>14</td>\n","      <td>56</td>\n","      <td>-25</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 7129 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f3ece355-ed18-4146-92ab-ddc3c8b1b0dc')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f3ece355-ed18-4146-92ab-ddc3c8b1b0dc button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f3ece355-ed18-4146-92ab-ddc3c8b1b0dc');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c41ab2d7-7097-4ef0-bf86-17475ec4c7a7\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c41ab2d7-7097-4ef0-bf86-17475ec4c7a7')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c41ab2d7-7097-4ef0-bf86-17475ec4c7a7 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"}},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","source":["עכשיו נתאים את התוויות של המטפולים לנתונים"],"metadata":{"id":"QENHxnk-Q9x0"}},{"cell_type":"code","source":["print(y)"],"metadata":{"collapsed":true,"id":"v0NSo0b1TCwm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1719807046212,"user_tz":-180,"elapsed":6,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"532e3494-6e52-49d1-e4e3-94a74469fa2c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["   patient  cancer\n","0        1       0\n","1        2       0\n","2        3       0\n","3        4       0\n","4        5       0\n","..     ...     ...\n","67      68       0\n","68      69       0\n","69      70       0\n","70      71       0\n","71      72       0\n","\n","[72 rows x 2 columns]\n"]}]},{"cell_type":"markdown","source":[" חלוקת הנתונים לסט אימון וסט בדיקה ואיפוס האינדקסים"],"metadata":{"id":"uAyXhlXFXsuB"}},{"cell_type":"code","source":["\"\"\"\n","Split into train and test (we first need to reset the index as the indexes of two dataframes need to be the same before you combine them).\n","\"\"\"\n","# Convert 'patient' column to integers\n","y[\"patient\"] = y[\"patient\"].astype(int)\n","\n","# Reset index for X_train and y_train\n","X_train = X_train.reset_index(drop=True)\n","# Reset the index of X_train dataframe and drop the previous index.\n","\n","# חלוקה נכונה של הנתונים וה-labels\n","y_train = y[y.patient <= 38]['cancer'].reset_index(drop=True)\n","\n","\n","# Subset the labels (y) for the first 38 patients and reset index, dropping the previous index.\n","\n","# Reset index for X_test and y_test\n","X_test = X_test.reset_index(drop=True)\n","# Reset the index of X_test dataframe and drop the previous index.\n","\n","y_test = y[y.patient > 38]['cancer'].reset_index(drop=True)\n","# Subset the labels (y) for the patients after the first 38 and reset index, dropping the previous index.\n"],"metadata":{"id":"ipw4z9BnRBj2","executionInfo":{"status":"ok","timestamp":1721030239178,"user_tz":-180,"elapsed":343,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}}},"execution_count":13,"outputs":[]},{"cell_type":"markdown","source":["נבדוק איך התקדמנו"],"metadata":{"id":"r9f77gJiUC2m"}},{"cell_type":"code","source":["X_train.describe()"],"metadata":{"id":"rIUggWEQUGdj","colab":{"base_uri":"https://localhost:8080/","height":384},"executionInfo":{"status":"ok","timestamp":1719807061518,"user_tz":-180,"elapsed":15310,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"05cedf1b-8cff-48b6-889e-3ea02e3a6b50"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Gene Accession Number  AFFX-BioB-5_at  AFFX-BioB-M_at  AFFX-BioB-3_at  \\\n","count                       38.000000       38.000000       38.000000   \n","mean                      -120.868421     -150.526316      -17.157895   \n","std                        109.555656       75.734507      117.686144   \n","min                       -476.000000     -327.000000     -307.000000   \n","25%                       -138.750000     -205.000000      -83.250000   \n","50%                       -106.500000     -141.500000      -43.500000   \n","75%                        -68.250000      -94.750000       47.250000   \n","max                         17.000000      -20.000000      265.000000   \n","\n","Gene Accession Number  AFFX-BioC-5_at  AFFX-BioC-3_at  AFFX-BioDn-5_at  \\\n","count                       38.000000       38.000000        38.000000   \n","mean                       181.394737     -276.552632      -439.210526   \n","std                        117.468004      111.004431       135.458412   \n","min                        -36.000000     -541.000000      -790.000000   \n","25%                         81.250000     -374.250000      -547.000000   \n","50%                        200.000000     -263.000000      -426.500000   \n","75%                        279.250000     -188.750000      -344.750000   \n","max                        392.000000      -51.000000      -155.000000   \n","\n","Gene Accession Number  AFFX-BioDn-3_at  AFFX-CreX-5_at  AFFX-CreX-3_at  \\\n","count                        38.000000       38.000000       38.000000   \n","mean                        -43.578947     -201.184211       99.052632   \n","std                         219.482393       90.838989       83.178397   \n","min                        -479.000000     -463.000000      -82.000000   \n","25%                        -169.000000     -239.250000       36.000000   \n","50%                         -33.500000     -185.500000       99.500000   \n","75%                          79.000000     -144.750000      152.250000   \n","max                         419.000000      -24.000000      283.000000   \n","\n","Gene Accession Number  AFFX-BioB-5_st  ...   U48730_at    U58516_at  \\\n","count                       38.000000  ...   38.000000    38.000000   \n","mean                       112.131579  ...  178.763158   750.842105   \n","std                        211.815597  ...   84.826830   298.008392   \n","min                       -215.000000  ...   30.000000   224.000000   \n","25%                        -47.000000  ...  120.000000   575.500000   \n","50%                         70.500000  ...  174.500000   700.000000   \n","75%                        242.750000  ...  231.750000   969.500000   \n","max                        561.000000  ...  356.000000  1653.000000   \n","\n","Gene Accession Number   U73738_at    X06956_at   X16699_at    X83863_at  \\\n","count                   38.000000    38.000000   38.000000    38.000000   \n","mean                     8.815789   399.131579  -20.052632   869.052632   \n","std                     77.108507   469.579868   42.346031   482.366461   \n","min                   -178.000000    36.000000 -112.000000   195.000000   \n","25%                    -42.750000   174.500000  -48.000000   595.250000   \n","50%                     10.500000   266.000000  -18.000000   744.500000   \n","75%                     57.000000   451.750000    9.250000  1112.000000   \n","max                    218.000000  2527.000000   52.000000  2315.000000   \n","\n","Gene Accession Number    Z17240_at  L49218_f_at  M71243_f_at  Z78285_f_at  \n","count                    38.000000    38.000000    38.000000    38.000000  \n","mean                    335.842105    19.210526   504.394737   -29.210526  \n","std                     209.826766    31.158841   728.744405    30.851132  \n","min                      41.000000   -50.000000    -2.000000   -94.000000  \n","25%                     232.750000     8.000000   136.000000   -42.750000  \n","50%                     308.500000    20.000000   243.500000   -26.000000  \n","75%                     389.500000    30.250000   487.250000   -11.500000  \n","max                    1109.000000   115.000000  3193.000000    36.000000  \n","\n","[8 rows x 7129 columns]"],"text/html":["\n","  <div id=\"df-ec338962-9a4d-4a1c-92a8-5cff7c265504\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>Gene Accession Number</th>\n","      <th>AFFX-BioB-5_at</th>\n","      <th>AFFX-BioB-M_at</th>\n","      <th>AFFX-BioB-3_at</th>\n","      <th>AFFX-BioC-5_at</th>\n","      <th>AFFX-BioC-3_at</th>\n","      <th>AFFX-BioDn-5_at</th>\n","      <th>AFFX-BioDn-3_at</th>\n","      <th>AFFX-CreX-5_at</th>\n","      <th>AFFX-CreX-3_at</th>\n","      <th>AFFX-BioB-5_st</th>\n","      <th>...</th>\n","      <th>U48730_at</th>\n","      <th>U58516_at</th>\n","      <th>U73738_at</th>\n","      <th>X06956_at</th>\n","      <th>X16699_at</th>\n","      <th>X83863_at</th>\n","      <th>Z17240_at</th>\n","      <th>L49218_f_at</th>\n","      <th>M71243_f_at</th>\n","      <th>Z78285_f_at</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>38.000000</td>\n","      <td>38.000000</td>\n","      <td>38.000000</td>\n","      <td>38.000000</td>\n","      <td>38.000000</td>\n","      <td>38.000000</td>\n","      <td>38.000000</td>\n","      <td>38.000000</td>\n","      <td>38.000000</td>\n","      <td>38.000000</td>\n","      <td>...</td>\n","      <td>38.000000</td>\n","      <td>38.000000</td>\n","      <td>38.000000</td>\n","      <td>38.000000</td>\n","      <td>38.000000</td>\n","      <td>38.000000</td>\n","      <td>38.000000</td>\n","      <td>38.000000</td>\n","      <td>38.000000</td>\n","      <td>38.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>-120.868421</td>\n","      <td>-150.526316</td>\n","      <td>-17.157895</td>\n","      <td>181.394737</td>\n","      <td>-276.552632</td>\n","      <td>-439.210526</td>\n","      <td>-43.578947</td>\n","      <td>-201.184211</td>\n","      <td>99.052632</td>\n","      <td>112.131579</td>\n","      <td>...</td>\n","      <td>178.763158</td>\n","      <td>750.842105</td>\n","      <td>8.815789</td>\n","      <td>399.131579</td>\n","      <td>-20.052632</td>\n","      <td>869.052632</td>\n","      <td>335.842105</td>\n","      <td>19.210526</td>\n","      <td>504.394737</td>\n","      <td>-29.210526</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>109.555656</td>\n","      <td>75.734507</td>\n","      <td>117.686144</td>\n","      <td>117.468004</td>\n","      <td>111.004431</td>\n","      <td>135.458412</td>\n","      <td>219.482393</td>\n","      <td>90.838989</td>\n","      <td>83.178397</td>\n","      <td>211.815597</td>\n","      <td>...</td>\n","      <td>84.826830</td>\n","      <td>298.008392</td>\n","      <td>77.108507</td>\n","      <td>469.579868</td>\n","      <td>42.346031</td>\n","      <td>482.366461</td>\n","      <td>209.826766</td>\n","      <td>31.158841</td>\n","      <td>728.744405</td>\n","      <td>30.851132</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>-476.000000</td>\n","      <td>-327.000000</td>\n","      <td>-307.000000</td>\n","      <td>-36.000000</td>\n","      <td>-541.000000</td>\n","      <td>-790.000000</td>\n","      <td>-479.000000</td>\n","      <td>-463.000000</td>\n","      <td>-82.000000</td>\n","      <td>-215.000000</td>\n","      <td>...</td>\n","      <td>30.000000</td>\n","      <td>224.000000</td>\n","      <td>-178.000000</td>\n","      <td>36.000000</td>\n","      <td>-112.000000</td>\n","      <td>195.000000</td>\n","      <td>41.000000</td>\n","      <td>-50.000000</td>\n","      <td>-2.000000</td>\n","      <td>-94.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>-138.750000</td>\n","      <td>-205.000000</td>\n","      <td>-83.250000</td>\n","      <td>81.250000</td>\n","      <td>-374.250000</td>\n","      <td>-547.000000</td>\n","      <td>-169.000000</td>\n","      <td>-239.250000</td>\n","      <td>36.000000</td>\n","      <td>-47.000000</td>\n","      <td>...</td>\n","      <td>120.000000</td>\n","      <td>575.500000</td>\n","      <td>-42.750000</td>\n","      <td>174.500000</td>\n","      <td>-48.000000</td>\n","      <td>595.250000</td>\n","      <td>232.750000</td>\n","      <td>8.000000</td>\n","      <td>136.000000</td>\n","      <td>-42.750000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>-106.500000</td>\n","      <td>-141.500000</td>\n","      <td>-43.500000</td>\n","      <td>200.000000</td>\n","      <td>-263.000000</td>\n","      <td>-426.500000</td>\n","      <td>-33.500000</td>\n","      <td>-185.500000</td>\n","      <td>99.500000</td>\n","      <td>70.500000</td>\n","      <td>...</td>\n","      <td>174.500000</td>\n","      <td>700.000000</td>\n","      <td>10.500000</td>\n","      <td>266.000000</td>\n","      <td>-18.000000</td>\n","      <td>744.500000</td>\n","      <td>308.500000</td>\n","      <td>20.000000</td>\n","      <td>243.500000</td>\n","      <td>-26.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>-68.250000</td>\n","      <td>-94.750000</td>\n","      <td>47.250000</td>\n","      <td>279.250000</td>\n","      <td>-188.750000</td>\n","      <td>-344.750000</td>\n","      <td>79.000000</td>\n","      <td>-144.750000</td>\n","      <td>152.250000</td>\n","      <td>242.750000</td>\n","      <td>...</td>\n","      <td>231.750000</td>\n","      <td>969.500000</td>\n","      <td>57.000000</td>\n","      <td>451.750000</td>\n","      <td>9.250000</td>\n","      <td>1112.000000</td>\n","      <td>389.500000</td>\n","      <td>30.250000</td>\n","      <td>487.250000</td>\n","      <td>-11.500000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>17.000000</td>\n","      <td>-20.000000</td>\n","      <td>265.000000</td>\n","      <td>392.000000</td>\n","      <td>-51.000000</td>\n","      <td>-155.000000</td>\n","      <td>419.000000</td>\n","      <td>-24.000000</td>\n","      <td>283.000000</td>\n","      <td>561.000000</td>\n","      <td>...</td>\n","      <td>356.000000</td>\n","      <td>1653.000000</td>\n","      <td>218.000000</td>\n","      <td>2527.000000</td>\n","      <td>52.000000</td>\n","      <td>2315.000000</td>\n","      <td>1109.000000</td>\n","      <td>115.000000</td>\n","      <td>3193.000000</td>\n","      <td>36.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>8 rows × 7129 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ec338962-9a4d-4a1c-92a8-5cff7c265504')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ec338962-9a4d-4a1c-92a8-5cff7c265504 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ec338962-9a4d-4a1c-92a8-5cff7c265504');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-27b15756-5f26-4176-a09b-fa04fc62b5be\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-27b15756-5f26-4176-a09b-fa04fc62b5be')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-27b15756-5f26-4176-a09b-fa04fc62b5be button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"}},"metadata":{},"execution_count":25}]},{"cell_type":"markdown","source":["אוטואינקודר"],"metadata":{"id":"DaXcUigG_sXI"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from tensorflow.keras.layers import Input, Dense\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.optimizers import Adam\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score"],"metadata":{"id":"r6dWX5ZRAT1z","executionInfo":{"status":"ok","timestamp":1721030255283,"user_tz":-180,"elapsed":5761,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["\n","# הצגת שמות העמודות של y\n","print(\"\\nColumns of y:\")\n","print(y.columns)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aa9vd5qL_qiF","executionInfo":{"status":"ok","timestamp":1721030259172,"user_tz":-180,"elapsed":344,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"eabf683f-69c1-4d68-c513-b25649601b7b"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Columns of y:\n","Index(['patient', 'cancer'], dtype='object')\n"]}]},{"cell_type":"code","source":["# הצגת תדירות הערכים בעמודת 'cancer'\n","print(\"\\nValue counts of 'cancer':\")\n","print(y['cancer'].value_counts())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Oud6qS7N2bzV","executionInfo":{"status":"ok","timestamp":1721030285862,"user_tz":-180,"elapsed":306,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"3884bffe-17ed-4d07-e92e-cdcf61e2f74e"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Value counts of 'cancer':\n","cancer\n","0    47\n","1    25\n","Name: count, dtype: int64\n"]}]},{"cell_type":"code","source":["# ניקוי שמות העמודות לנתוני אימון ובדיקה\n","X_train = train.T\n","X_test = test.T"],"metadata":{"id":"ZHpnMAky2f1o","executionInfo":{"status":"ok","timestamp":1721030294693,"user_tz":-180,"elapsed":437,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["# הצגת צורת הנתונים לפני הניקוי\n","print(\"X_train shape before cleanup:\", X_train.shape)\n","print(\"X_test shape before cleanup:\", X_test.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cbjKak3s2lu0","executionInfo":{"status":"ok","timestamp":1719807065493,"user_tz":-180,"elapsed":16,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"b2cda7c6-5462-45f4-9b53-4a940dd2335c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["X_train shape before cleanup: (40, 7129)\n","X_test shape before cleanup: (36, 7129)\n"]}]},{"cell_type":"code","source":["# ניקוי שמות העמודות\n","X_train.columns = X_train.iloc[1]\n","X_test.columns = X_test.iloc[1]\n","X_train = X_train.drop([\"Gene Description\", \"Gene Accession Number\"]).apply(pd.to_numeric)\n","X_test = X_test.drop([\"Gene Description\", \"Gene Accession Number\"]).apply(pd.to_numeric)"],"metadata":{"id":"7TMMw1CN2qSy","executionInfo":{"status":"ok","timestamp":1721030315984,"user_tz":-180,"elapsed":2698,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["# הצגת צורת הנתונים לאחר הניקוי\n","print(\"X_train shape after cleanup:\", X_train.shape)\n","print(\"X_test shape after cleanup:\", X_test.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J6G-sOMJ2v21","executionInfo":{"status":"ok","timestamp":1719807068347,"user_tz":-180,"elapsed":15,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"a15bf7e4-852e-4186-af59-82f7444c0cb3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["X_train shape after cleanup: (38, 7129)\n","X_test shape after cleanup: (34, 7129)\n"]}]},{"cell_type":"code","source":["# חלוקה נכונה של הנתונים וה-labels\n","y[\"patient\"] = y[\"patient\"].astype(int)\n","X_train = X_train.reset_index(drop=True)\n","y_train = y[y.patient <= 38]['cancer'].reset_index(drop=True)\n","X_test = X_test.reset_index(drop=True)\n","y_test = y[y.patient > 38]['cancer'].reset_index(drop=True)"],"metadata":{"id":"jLdonh-R20Dr","executionInfo":{"status":"ok","timestamp":1721030443357,"user_tz":-180,"elapsed":415,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["# המרה למספרים (קטגוריות ל-labels)\n","le = LabelEncoder()\n","y_train = le.fit_transform(y_train)\n","y_test = le.transform(y_test)"],"metadata":{"id":"2G8ZwW-H24JI","executionInfo":{"status":"ok","timestamp":1721030445928,"user_tz":-180,"elapsed":310,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["# שלב 2: סטנדרטיזציה של הנתונים\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.transform(X_test)"],"metadata":{"id":"H2PuKAPg27Lh","executionInfo":{"status":"ok","timestamp":1721030450665,"user_tz":-180,"elapsed":477,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}}},"execution_count":21,"outputs":[]},{"cell_type":"markdown","source":["אוטואינקודר"],"metadata":{"id":"Z0XW8iBl296A"}},{"cell_type":"code","source":["# שלב 3: בניית האוטואינקודר\n","input_dim = X_train_scaled.shape[1]\n","encoding_dim = 64"],"metadata":{"id":"onpiu5z13AA7","executionInfo":{"status":"ok","timestamp":1721038381581,"user_tz":-180,"elapsed":322,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}}},"execution_count":72,"outputs":[]},{"cell_type":"markdown","source":["אינקודר"],"metadata":{"id":"QI175dkU3Dw5"}},{"cell_type":"code","source":["from keras.layers import BatchNormalization\n","from keras.regularizers import l2\n","from keras.layers import Dropout\n","input_layer = Input(shape=(input_dim,))\n","encoded = Dense(128, activation='relu')(input_layer)\n","encoded = BatchNormalization()(encoded)\n","encoded = Dense(encoding_dim, activation='relu', kernel_regularizer=l2(0.01))(encoded)\n","encoded = Dropout(0.5)(encoded)"],"metadata":{"id":"lcas6bPA3Fmt","executionInfo":{"status":"ok","timestamp":1721038419597,"user_tz":-180,"elapsed":378,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}}},"execution_count":74,"outputs":[]},{"cell_type":"markdown","source":["דיקודר"],"metadata":{"id":"DCPukGqN3JYn"}},{"cell_type":"code","source":["# Decoder\n","decoded = Dense(128, activation='relu')(encoded)\n","decoded = BatchNormalization()(decoded)\n","decoded = Dense(input_dim, activation='sigmoid')(decoded)"],"metadata":{"id":"iRI6T21X3Kqy","executionInfo":{"status":"ok","timestamp":1721038435360,"user_tz":-180,"elapsed":319,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}}},"execution_count":75,"outputs":[]},{"cell_type":"code","source":["# Model\n","autoencoder = Model(input_layer, decoded)\n","\n","# שלב 4: קומפילציה ואימון המודל\n","autoencoder.compile(optimizer=Adam(), loss='mean_squared_error')\n","\n","history = autoencoder.fit(X_train_scaled, X_train_scaled,\n","                          epochs=50,\n","                          batch_size=256,\n","                          shuffle=True,\n","                          validation_split=0.2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"HCyYe8uU3PHQ","executionInfo":{"status":"ok","timestamp":1721038612617,"user_tz":-180,"elapsed":12086,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"31ac1a6a-f91b-4316-81ed-897cf5084996"},"execution_count":81,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","1/1 [==============================] - 7s 7s/step - loss: 0.7255 - val_loss: 1.1450\n","Epoch 2/50\n","1/1 [==============================] - 0s 203ms/step - loss: 0.7298 - val_loss: 1.1451\n","Epoch 3/50\n","1/1 [==============================] - 0s 229ms/step - loss: 0.7231 - val_loss: 1.1445\n","Epoch 4/50\n","1/1 [==============================] - 0s 161ms/step - loss: 0.7328 - val_loss: 1.1440\n","Epoch 5/50\n","1/1 [==============================] - 0s 150ms/step - loss: 0.7289 - val_loss: 1.1433\n","Epoch 6/50\n","1/1 [==============================] - 0s 178ms/step - loss: 0.7293 - val_loss: 1.1424\n","Epoch 7/50\n","1/1 [==============================] - 0s 139ms/step - loss: 0.7366 - val_loss: 1.1414\n","Epoch 8/50\n","1/1 [==============================] - 0s 101ms/step - loss: 0.7526 - val_loss: 1.1407\n","Epoch 9/50\n","1/1 [==============================] - 0s 114ms/step - loss: 0.7217 - val_loss: 1.1402\n","Epoch 10/50\n","1/1 [==============================] - 0s 128ms/step - loss: 0.7256 - val_loss: 1.1401\n","Epoch 11/50\n","1/1 [==============================] - 0s 112ms/step - loss: 0.7200 - val_loss: 1.1400\n","Epoch 12/50\n","1/1 [==============================] - 0s 112ms/step - loss: 0.7236 - val_loss: 1.1396\n","Epoch 13/50\n","1/1 [==============================] - 0s 105ms/step - loss: 0.7319 - val_loss: 1.1395\n","Epoch 14/50\n","1/1 [==============================] - 0s 162ms/step - loss: 0.7197 - val_loss: 1.1400\n","Epoch 15/50\n","1/1 [==============================] - 0s 106ms/step - loss: 0.7197 - val_loss: 1.1405\n","Epoch 16/50\n","1/1 [==============================] - 0s 114ms/step - loss: 0.7244 - val_loss: 1.1412\n","Epoch 17/50\n","1/1 [==============================] - 0s 107ms/step - loss: 0.7110 - val_loss: 1.1420\n","Epoch 18/50\n","1/1 [==============================] - 0s 66ms/step - loss: 0.7177 - val_loss: 1.1425\n","Epoch 19/50\n","1/1 [==============================] - 0s 95ms/step - loss: 0.7090 - val_loss: 1.1429\n","Epoch 20/50\n","1/1 [==============================] - 0s 67ms/step - loss: 0.7145 - val_loss: 1.1430\n","Epoch 21/50\n","1/1 [==============================] - 0s 70ms/step - loss: 0.7146 - val_loss: 1.1432\n","Epoch 22/50\n","1/1 [==============================] - 0s 68ms/step - loss: 0.7091 - val_loss: 1.1432\n","Epoch 23/50\n","1/1 [==============================] - 0s 68ms/step - loss: 0.7095 - val_loss: 1.1433\n","Epoch 24/50\n","1/1 [==============================] - 0s 81ms/step - loss: 0.7054 - val_loss: 1.1433\n","Epoch 25/50\n","1/1 [==============================] - 0s 100ms/step - loss: 0.7147 - val_loss: 1.1432\n","Epoch 26/50\n","1/1 [==============================] - 0s 77ms/step - loss: 0.7255 - val_loss: 1.1431\n","Epoch 27/50\n","1/1 [==============================] - 0s 69ms/step - loss: 0.7087 - val_loss: 1.1427\n","Epoch 28/50\n","1/1 [==============================] - 0s 74ms/step - loss: 0.7057 - val_loss: 1.1424\n","Epoch 29/50\n","1/1 [==============================] - 0s 64ms/step - loss: 0.7022 - val_loss: 1.1420\n","Epoch 30/50\n","1/1 [==============================] - 0s 60ms/step - loss: 0.7150 - val_loss: 1.1416\n","Epoch 31/50\n","1/1 [==============================] - 0s 72ms/step - loss: 0.7046 - val_loss: 1.1409\n","Epoch 32/50\n","1/1 [==============================] - 0s 58ms/step - loss: 0.7052 - val_loss: 1.1400\n","Epoch 33/50\n","1/1 [==============================] - 0s 85ms/step - loss: 0.7072 - val_loss: 1.1391\n","Epoch 34/50\n","1/1 [==============================] - 0s 70ms/step - loss: 0.7009 - val_loss: 1.1383\n","Epoch 35/50\n","1/1 [==============================] - 0s 66ms/step - loss: 0.7013 - val_loss: 1.1374\n","Epoch 36/50\n","1/1 [==============================] - 0s 68ms/step - loss: 0.7015 - val_loss: 1.1367\n","Epoch 37/50\n","1/1 [==============================] - 0s 82ms/step - loss: 0.7044 - val_loss: 1.1361\n","Epoch 38/50\n","1/1 [==============================] - 0s 91ms/step - loss: 0.6858 - val_loss: 1.1356\n","Epoch 39/50\n","1/1 [==============================] - 0s 72ms/step - loss: 0.6975 - val_loss: 1.1355\n","Epoch 40/50\n","1/1 [==============================] - 0s 67ms/step - loss: 0.6951 - val_loss: 1.1353\n","Epoch 41/50\n","1/1 [==============================] - 0s 71ms/step - loss: 0.6953 - val_loss: 1.1353\n","Epoch 42/50\n","1/1 [==============================] - 0s 70ms/step - loss: 0.6939 - val_loss: 1.1354\n","Epoch 43/50\n","1/1 [==============================] - 0s 62ms/step - loss: 0.7105 - val_loss: 1.1358\n","Epoch 44/50\n","1/1 [==============================] - 0s 66ms/step - loss: 0.6982 - val_loss: 1.1363\n","Epoch 45/50\n","1/1 [==============================] - 0s 63ms/step - loss: 0.6931 - val_loss: 1.1369\n","Epoch 46/50\n","1/1 [==============================] - 0s 90ms/step - loss: 0.6923 - val_loss: 1.1373\n","Epoch 47/50\n","1/1 [==============================] - 0s 64ms/step - loss: 0.7008 - val_loss: 1.1374\n","Epoch 48/50\n","1/1 [==============================] - 0s 66ms/step - loss: 0.6815 - val_loss: 1.1376\n","Epoch 49/50\n","1/1 [==============================] - 0s 73ms/step - loss: 0.6990 - val_loss: 1.1374\n","Epoch 50/50\n","1/1 [==============================] - 0s 78ms/step - loss: 0.6867 - val_loss: 1.1371\n"]}]},{"cell_type":"code","source":["import xgboost as xgb\n","from sklearn.metrics import accuracy_score\n","\n","# אימון מסווג XGBoost על הייצוגים הדחוסים\n","classifier = xgb.XGBClassifier()\n","classifier.fit(X_train_encoded, y_train)\n","\n","# חיזוי ובדיקת ביצועים על סט הבדיקה\n","y_pred_test = classifier.predict(X_test_encoded)\n","accuracy_test = accuracy_score(y_test, y_pred_test)\n","print(f\"Test Accuracy with XGBoost: {accuracy_test * 100:.2f}%\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KjnGF9gq3WhB","executionInfo":{"status":"ok","timestamp":1721038622331,"user_tz":-180,"elapsed":423,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"5b7f5ec3-5010-4772-f37e-f3aa8360bc2f"},"execution_count":82,"outputs":[{"output_type":"stream","name":"stdout","text":["Test Accuracy with XGBoost: 73.53%\n"]}]},{"cell_type":"code","source":["# יצירת גרף דיוק למסווג\n","train_accuracies = []\n","val_accuracies = []\n","\n","for _ in range(50):\n","    classifier.fit(X_train_encoded, y_train)\n","    y_train_pred = classifier.predict(X_train_encoded)\n","    y_val_pred = classifier.predict(X_test_encoded)\n","\n","    train_accuracy = accuracy_score(y_train, y_train_pred)\n","    val_accuracy = accuracy_score(y_test, y_val_pred)\n","\n","    train_accuracies.append(train_accuracy)\n","    val_accuracies.append(val_accuracy)\n","\n","print(f\"Final Accuracy: {val_accuracies[-1] * 100:.2f}%\")\n","\n","plt.figure(figsize=(12, 6))\n","plt.plot(train_accuracies, label='Accuracy - Training Set')\n","plt.plot(val_accuracies, label='Accuracy - Validation Set')\n","plt.title('Accuracy During Training and Validation')\n","plt.xlabel('Epoch')\n","plt.ylabel('Accuracy')\n","plt.legend()\n","plt.show()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":581},"id":"HCS4jPJHaXpt","executionInfo":{"status":"ok","timestamp":1721038631734,"user_tz":-180,"elapsed":1838,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"02b8c2ad-3422-499c-825a-f6ef23ecd840"},"execution_count":83,"outputs":[{"output_type":"stream","name":"stdout","text":["Final Accuracy: 73.53%\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["נבדוק את המודל על הtest"],"metadata":{"id":"eSDwTLBv10lR"}},{"cell_type":"code","source":["# חיזוי ובדיקת ביצועים על סט הבדיקה\n","y_pred_test = classifier.predict(X_test_encoded)\n","accuracy_test = accuracy_score(y_test, y_pred_test)\n","print(f\"Test Accuracy: {accuracy_test * 100:.2f}%\")\n","\n","# חיזוי ובדיקת ביצועים על סט הוולידציה (כבר נעשה בקוד הקודם)\n","y_pred_val = classifier.predict(X_test_encoded)\n","accuracy_val = accuracy_score(y_test, y_pred_val)\n","print(f\"Validation Accuracy: {accuracy_val * 100:.2f}%\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YBhCpLjH2vMS","executionInfo":{"status":"ok","timestamp":1721038638701,"user_tz":-180,"elapsed":406,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"980f1904-5686-483f-f5a5-7fb193a688e9"},"execution_count":84,"outputs":[{"output_type":"stream","name":"stdout","text":["Test Accuracy: 73.53%\n","Validation Accuracy: 73.53%\n"]}]},{"cell_type":"code","source":["from keras.layers import Dropout\n","from keras.regularizers import l2\n","from keras.optimizers import Adam\n","from keras.layers import Input, Dense\n","from keras.models import Model\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score\n","import matplotlib.pyplot as plt\n","\n","# שלב 3: בניית האוטואינקודר עם רגולריזציה\n","input_dim = X_train_scaled.shape[1]\n","encoding_dim = 32\n","\n","# Encoder\n","input_layer = Input(shape=(input_dim,))\n","encoded = Dense(encoding_dim, activation='relu', kernel_regularizer=l2(0.01))(input_layer)\n","encoded = Dropout(0.5)(encoded)  # הוספת Dropout\n","\n","# Decoder\n","decoded = Dense(input_dim, activation='sigmoid')(encoded)\n","\n","# Model\n","autoencoder = Model(input_layer, decoded)\n","\n","# שלב 4: קומפילציה ואימון המודל\n","autoencoder.compile(optimizer=Adam(), loss='mean_squared_error')\n","\n","history = autoencoder.fit(X_train_scaled, X_train_scaled,\n","                          epochs=50,\n","                          batch_size=256,\n","                          shuffle=True,\n","                          validation_split=0.2)\n","\n","# שלב 5: הפקת הייצוגים הדחוסים\n","encoder = Model(input_layer, encoded)\n","X_train_encoded = encoder.predict(X_train_scaled)\n","X_test_encoded = encoder.predict(X_test_scaled)\n","\n","# שלב 6: אימון מסווג על הייצוגים הדחוסים\n","classifier = RandomForestClassifier()\n","classifier.fit(X_train_encoded, y_train)\n","\n","# חיזוי וביצועים\n","y_pred_train = classifier.predict(X_train_encoded)\n","y_pred_test = classifier.predict(X_test_encoded)\n","accuracy_train = accuracy_score(y_train, y_pred_train)\n","accuracy_test = accuracy_score(y_test, y_pred_test)\n","print(f\"Training Accuracy: {accuracy_train * 100:.2f}%\")\n","print(f\"Test Accuracy: {accuracy_test * 100:.2f}%\")\n","\n","# יצירת גרפי האובדן\n","plt.figure(figsize=(12, 6))\n","plt.plot(history.history['loss'], label='Loss - Training Set')\n","plt.plot(history.history['val_loss'], label='Loss - Validation Set')\n","plt.title('Loss During Training and Validation')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.legend()\n","plt.show()\n","\n","# גרף דיוק למסווג\n","train_accuracies = []\n","val_accuracies = []\n","\n","for _ in range(50):\n","    classifier.fit(X_train_encoded, y_train)\n","    y_train_pred = classifier.predict(X_train_encoded)\n","    y_val_pred = classifier.predict(X_test_encoded)\n","\n","    train_accuracy = accuracy_score(y_train, y_train_pred)\n","    val_accuracy = accuracy_score(y_test, y_val_pred)\n","\n","    train_accuracies.append(train_accuracy)\n","    val_accuracies.append(val_accuracy)\n","\n","plt.figure(figsize=(12, 6))\n","plt.plot(train_accuracies, label='Accuracy - Training Set')\n","plt.plot(val_accuracies, label='Accuracy - Validation Set')\n","plt.title('Accuracy During Training and Validation')\n","plt.xlabel('Epoch')\n","plt.ylabel('Accuracy')\n","plt.legend()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"collapsed":true,"id":"WCqjGeAy13nJ","executionInfo":{"status":"ok","timestamp":1721038659898,"user_tz":-180,"elapsed":16942,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"ec6a3267-3f3c-4a76-fbd9-928b731c74fc"},"execution_count":85,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","1/1 [==============================] - 1s 753ms/step - loss: 1.8679 - val_loss: 1.9030\n","Epoch 2/50\n","1/1 [==============================] - 0s 45ms/step - loss: 1.8015 - val_loss: 1.8419\n","Epoch 3/50\n","1/1 [==============================] - 0s 43ms/step - loss: 1.7396 - val_loss: 1.7858\n","Epoch 4/50\n","1/1 [==============================] - 0s 49ms/step - loss: 1.6800 - val_loss: 1.7349\n","Epoch 5/50\n","1/1 [==============================] - 0s 44ms/step - loss: 1.6249 - val_loss: 1.6890\n","Epoch 6/50\n","1/1 [==============================] - 0s 46ms/step - loss: 1.5712 - val_loss: 1.6480\n","Epoch 7/50\n","1/1 [==============================] - 0s 49ms/step - loss: 1.5187 - val_loss: 1.6115\n","Epoch 8/50\n","1/1 [==============================] - 0s 49ms/step - loss: 1.4725 - val_loss: 1.5788\n","Epoch 9/50\n","1/1 [==============================] - 0s 56ms/step - loss: 1.4103 - val_loss: 1.5502\n","Epoch 10/50\n","1/1 [==============================] - 0s 55ms/step - loss: 1.3722 - val_loss: 1.5248\n","Epoch 11/50\n","1/1 [==============================] - 0s 45ms/step - loss: 1.3292 - val_loss: 1.5023\n","Epoch 12/50\n","1/1 [==============================] - 0s 44ms/step - loss: 1.2770 - val_loss: 1.4823\n","Epoch 13/50\n","1/1 [==============================] - 0s 44ms/step - loss: 1.2278 - val_loss: 1.4647\n","Epoch 14/50\n","1/1 [==============================] - 0s 43ms/step - loss: 1.1878 - val_loss: 1.4486\n","Epoch 15/50\n","1/1 [==============================] - 0s 45ms/step - loss: 1.1590 - val_loss: 1.4337\n","Epoch 16/50\n","1/1 [==============================] - 0s 44ms/step - loss: 1.1345 - val_loss: 1.4201\n","Epoch 17/50\n","1/1 [==============================] - 0s 50ms/step - loss: 1.0949 - val_loss: 1.4073\n","Epoch 18/50\n","1/1 [==============================] - 0s 49ms/step - loss: 1.0670 - val_loss: 1.3954\n","Epoch 19/50\n","1/1 [==============================] - 0s 43ms/step - loss: 1.0547 - val_loss: 1.3841\n","Epoch 20/50\n","1/1 [==============================] - 0s 44ms/step - loss: 1.0350 - val_loss: 1.3732\n","Epoch 21/50\n","1/1 [==============================] - 0s 43ms/step - loss: 1.0401 - val_loss: 1.3631\n","Epoch 22/50\n","1/1 [==============================] - 0s 48ms/step - loss: 1.0160 - val_loss: 1.3535\n","Epoch 23/50\n","1/1 [==============================] - 0s 45ms/step - loss: 0.9899 - val_loss: 1.3444\n","Epoch 24/50\n","1/1 [==============================] - 0s 45ms/step - loss: 0.9810 - val_loss: 1.3357\n","Epoch 25/50\n","1/1 [==============================] - 0s 44ms/step - loss: 0.9766 - val_loss: 1.3277\n","Epoch 26/50\n","1/1 [==============================] - 0s 46ms/step - loss: 0.9574 - val_loss: 1.3202\n","Epoch 27/50\n","1/1 [==============================] - 0s 43ms/step - loss: 0.9561 - val_loss: 1.3133\n","Epoch 28/50\n","1/1 [==============================] - 0s 69ms/step - loss: 0.9547 - val_loss: 1.3070\n","Epoch 29/50\n","1/1 [==============================] - 0s 57ms/step - loss: 0.9425 - val_loss: 1.3014\n","Epoch 30/50\n","1/1 [==============================] - 0s 53ms/step - loss: 0.9229 - val_loss: 1.2967\n","Epoch 31/50\n","1/1 [==============================] - 0s 54ms/step - loss: 0.9111 - val_loss: 1.2926\n","Epoch 32/50\n","1/1 [==============================] - 0s 59ms/step - loss: 0.9215 - val_loss: 1.2893\n","Epoch 33/50\n","1/1 [==============================] - 0s 57ms/step - loss: 0.8978 - val_loss: 1.2866\n","Epoch 34/50\n","1/1 [==============================] - 0s 44ms/step - loss: 0.9118 - val_loss: 1.2843\n","Epoch 35/50\n","1/1 [==============================] - 0s 43ms/step - loss: 0.9091 - val_loss: 1.2828\n","Epoch 36/50\n","1/1 [==============================] - 0s 48ms/step - loss: 0.8957 - val_loss: 1.2822\n","Epoch 37/50\n","1/1 [==============================] - 0s 74ms/step - loss: 0.8960 - val_loss: 1.2815\n","Epoch 38/50\n","1/1 [==============================] - 0s 49ms/step - loss: 0.8920 - val_loss: 1.2812\n","Epoch 39/50\n","1/1 [==============================] - 0s 45ms/step - loss: 0.8946 - val_loss: 1.2810\n","Epoch 40/50\n","1/1 [==============================] - 0s 46ms/step - loss: 0.8790 - val_loss: 1.2806\n","Epoch 41/50\n","1/1 [==============================] - 0s 44ms/step - loss: 0.8812 - val_loss: 1.2803\n","Epoch 42/50\n","1/1 [==============================] - 0s 48ms/step - loss: 0.9065 - val_loss: 1.2799\n","Epoch 43/50\n","1/1 [==============================] - 0s 46ms/step - loss: 0.9060 - val_loss: 1.2785\n","Epoch 44/50\n","1/1 [==============================] - 0s 47ms/step - loss: 0.8754 - val_loss: 1.2773\n","Epoch 45/50\n","1/1 [==============================] - 0s 46ms/step - loss: 0.9029 - val_loss: 1.2765\n","Epoch 46/50\n","1/1 [==============================] - 0s 53ms/step - loss: 0.8990 - val_loss: 1.2754\n","Epoch 47/50\n","1/1 [==============================] - 0s 58ms/step - loss: 0.8884 - val_loss: 1.2743\n","Epoch 48/50\n","1/1 [==============================] - 0s 53ms/step - loss: 0.8770 - val_loss: 1.2730\n","Epoch 49/50\n","1/1 [==============================] - 0s 72ms/step - loss: 0.8591 - val_loss: 1.2715\n","Epoch 50/50\n","1/1 [==============================] - 0s 52ms/step - loss: 0.8637 - val_loss: 1.2697\n","2/2 [==============================] - 0s 7ms/step\n","2/2 [==============================] - 0s 6ms/step\n","Training Accuracy: 100.00%\n","Test Accuracy: 79.41%\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["from keras.layers import Dropout\n","from keras.regularizers import l2\n","from keras.optimizers import Adam\n","from keras.layers import Input, Dense\n","from keras.models import Model\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score\n","import matplotlib.pyplot as plt\n","\n","# שלב 3: בניית האוטואינקודר עם רגולריזציה\n","input_dim = X_train_scaled.shape[1]\n","encoding_dim = 32\n","\n","# Encoder\n","input_layer = Input(shape=(input_dim,))\n","encoded = Dense(encoding_dim, activation='relu', kernel_regularizer=l2(0.01))(input_layer)\n","encoded = Dropout(0.5)(encoded)  # הוספת Dropout\n","\n","# Decoder\n","decoded = Dense(128, activation='relu')(encoded)\n","decoded = BatchNormalization()(decoded)\n","decoded = Dense(input_dim, activation='sigmoid')(decoded)\n","\n","# Model\n","autoencoder = Model(input_layer, decoded)\n","\n","# שלב 4: קומפילציה ואימון המודל\n","autoencoder.compile(optimizer=Adam(), loss='mean_squared_error')\n","\n","history = autoencoder.fit(X_train_scaled, X_train_scaled,\n","                          epochs=50,\n","                          batch_size=256,\n","                          shuffle=True,\n","                          validation_split=0.2)\n","\n","# שלב 5: הפקת הייצוגים הדחוסים\n","encoder = Model(input_layer, encoded)\n","X_train_encoded = encoder.predict(X_train_scaled)\n","X_test_encoded = encoder.predict(X_test_scaled)\n","\n","# שלב 6: אימון מסווג על הייצוגים הדחוסים\n","classifier = RandomForestClassifier()\n","classifier.fit(X_train_encoded, y_train)\n","\n","# חיזוי ובדיקת ביצועים על סט הבדיקה\n","y_pred_test = classifier.predict(X_test_encoded)\n","accuracy_test = accuracy_score(y_test, y_pred_test)\n","print(f\"Test Accuracy: {accuracy_test * 100:.2f}%\")\n","\n","# חיזוי ובדיקת ביצועים על סט הוולידציה\n","y_pred_val = classifier.predict(X_test_encoded)\n","accuracy_val = accuracy_score(y_test, y_pred_val)\n","print(f\"Validation Accuracy: {accuracy_val * 100:.2f}%\")\n","\n","# יצירת גרפי האובדן\n","plt.figure(figsize=(12, 6))\n","plt.plot(history.history['loss'], label='Loss - Training Set')\n","plt.plot(history.history['val_loss'], label='Loss - Validation Set')\n","plt.title('Loss During Training and Validation')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.legend()\n","plt.show()\n","\n","# גרף דיוק למסווג\n","train_accuracies = []\n","test_accuracies = []\n","\n","for _ in range(50):\n","    classifier.fit(X_train_encoded, y_train)\n","    y_train_pred = classifier.predict(X_train_encoded)\n","    y_test_pred = classifier.predict(X_test_encoded)\n","\n","    train_accuracy = accuracy_score(y_train, y_train_pred)\n","    test_accuracy = accuracy_score(y_test, y_test_pred)\n","\n","    train_accuracies.append(train_accuracy)\n","    test_accuracies.append(test_accuracy)\n","\n","plt.figure(figsize=(12, 6))\n","plt.plot(train_accuracies, label='Accuracy - Training Set')\n","plt.plot(test_accuracies, label='Accuracy - Test Set')\n","plt.title('Accuracy During Training and Testing')\n","plt.xlabel('Epoch')\n","plt.ylabel('Accuracy')\n","plt.legend()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"PLs2P5wM8Sbw","executionInfo":{"status":"ok","timestamp":1721039431541,"user_tz":-180,"elapsed":28013,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"9a3fcc8e-80aa-4084-8395-a2ca8a24c368"},"execution_count":90,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","1/1 [==============================] - 7s 7s/step - loss: 1.8667 - val_loss: 1.9032\n","Epoch 2/50\n","1/1 [==============================] - 0s 130ms/step - loss: 1.7996 - val_loss: 1.8451\n","Epoch 3/50\n","1/1 [==============================] - 0s 170ms/step - loss: 1.7368 - val_loss: 1.7916\n","Epoch 4/50\n","1/1 [==============================] - 0s 207ms/step - loss: 1.6774 - val_loss: 1.7420\n","Epoch 5/50\n","1/1 [==============================] - 0s 204ms/step - loss: 1.6262 - val_loss: 1.6962\n","Epoch 6/50\n","1/1 [==============================] - 0s 244ms/step - loss: 1.5699 - val_loss: 1.6540\n","Epoch 7/50\n","1/1 [==============================] - 0s 221ms/step - loss: 1.5261 - val_loss: 1.6155\n","Epoch 8/50\n","1/1 [==============================] - 0s 237ms/step - loss: 1.4773 - val_loss: 1.5801\n","Epoch 9/50\n","1/1 [==============================] - 0s 176ms/step - loss: 1.4392 - val_loss: 1.5480\n","Epoch 10/50\n","1/1 [==============================] - 0s 212ms/step - loss: 1.3986 - val_loss: 1.5190\n","Epoch 11/50\n","1/1 [==============================] - 0s 252ms/step - loss: 1.3627 - val_loss: 1.4928\n","Epoch 12/50\n","1/1 [==============================] - 0s 205ms/step - loss: 1.3358 - val_loss: 1.4694\n","Epoch 13/50\n","1/1 [==============================] - 0s 283ms/step - loss: 1.3108 - val_loss: 1.4483\n","Epoch 14/50\n","1/1 [==============================] - 0s 188ms/step - loss: 1.2835 - val_loss: 1.4301\n","Epoch 15/50\n","1/1 [==============================] - 0s 256ms/step - loss: 1.2541 - val_loss: 1.4143\n","Epoch 16/50\n","1/1 [==============================] - 0s 229ms/step - loss: 1.2379 - val_loss: 1.4001\n","Epoch 17/50\n","1/1 [==============================] - 0s 220ms/step - loss: 1.2194 - val_loss: 1.3874\n","Epoch 18/50\n","1/1 [==============================] - 0s 148ms/step - loss: 1.1891 - val_loss: 1.3757\n","Epoch 19/50\n","1/1 [==============================] - 0s 130ms/step - loss: 1.1800 - val_loss: 1.3655\n","Epoch 20/50\n","1/1 [==============================] - 0s 207ms/step - loss: 1.1732 - val_loss: 1.3570\n","Epoch 21/50\n","1/1 [==============================] - 0s 215ms/step - loss: 1.1533 - val_loss: 1.3490\n","Epoch 22/50\n","1/1 [==============================] - 0s 133ms/step - loss: 1.1454 - val_loss: 1.3409\n","Epoch 23/50\n","1/1 [==============================] - 0s 291ms/step - loss: 1.1267 - val_loss: 1.3337\n","Epoch 24/50\n","1/1 [==============================] - 0s 249ms/step - loss: 1.1167 - val_loss: 1.3271\n","Epoch 25/50\n","1/1 [==============================] - 0s 212ms/step - loss: 1.1110 - val_loss: 1.3207\n","Epoch 26/50\n","1/1 [==============================] - 0s 241ms/step - loss: 1.1055 - val_loss: 1.3154\n","Epoch 27/50\n","1/1 [==============================] - 0s 231ms/step - loss: 1.1068 - val_loss: 1.3114\n","Epoch 28/50\n","1/1 [==============================] - 0s 289ms/step - loss: 1.0838 - val_loss: 1.3078\n","Epoch 29/50\n","1/1 [==============================] - 0s 107ms/step - loss: 1.0831 - val_loss: 1.3048\n","Epoch 30/50\n","1/1 [==============================] - 0s 111ms/step - loss: 1.0819 - val_loss: 1.3031\n","Epoch 31/50\n","1/1 [==============================] - 0s 114ms/step - loss: 1.0634 - val_loss: 1.3019\n","Epoch 32/50\n","1/1 [==============================] - 0s 121ms/step - loss: 1.0687 - val_loss: 1.3006\n","Epoch 33/50\n","1/1 [==============================] - 0s 137ms/step - loss: 1.0581 - val_loss: 1.2981\n","Epoch 34/50\n","1/1 [==============================] - 0s 152ms/step - loss: 1.0669 - val_loss: 1.2946\n","Epoch 35/50\n","1/1 [==============================] - 0s 193ms/step - loss: 1.0498 - val_loss: 1.2910\n","Epoch 36/50\n","1/1 [==============================] - 0s 123ms/step - loss: 1.0565 - val_loss: 1.2878\n","Epoch 37/50\n","1/1 [==============================] - 0s 147ms/step - loss: 1.0390 - val_loss: 1.2848\n","Epoch 38/50\n","1/1 [==============================] - 0s 125ms/step - loss: 1.0392 - val_loss: 1.2813\n","Epoch 39/50\n","1/1 [==============================] - 0s 165ms/step - loss: 1.0341 - val_loss: 1.2779\n","Epoch 40/50\n","1/1 [==============================] - 0s 142ms/step - loss: 1.0361 - val_loss: 1.2748\n","Epoch 41/50\n","1/1 [==============================] - 0s 192ms/step - loss: 1.0262 - val_loss: 1.2709\n","Epoch 42/50\n","1/1 [==============================] - 0s 96ms/step - loss: 1.0199 - val_loss: 1.2672\n","Epoch 43/50\n","1/1 [==============================] - 0s 123ms/step - loss: 1.0190 - val_loss: 1.2641\n","Epoch 44/50\n","1/1 [==============================] - 0s 155ms/step - loss: 1.0209 - val_loss: 1.2609\n","Epoch 45/50\n","1/1 [==============================] - 0s 135ms/step - loss: 1.0202 - val_loss: 1.2586\n","Epoch 46/50\n","1/1 [==============================] - 0s 184ms/step - loss: 1.0290 - val_loss: 1.2571\n","Epoch 47/50\n","1/1 [==============================] - 0s 98ms/step - loss: 1.0109 - val_loss: 1.2557\n","Epoch 48/50\n","1/1 [==============================] - 0s 91ms/step - loss: 1.0169 - val_loss: 1.2544\n","Epoch 49/50\n","1/1 [==============================] - 0s 82ms/step - loss: 1.0066 - val_loss: 1.2530\n","Epoch 50/50\n","1/1 [==============================] - 0s 88ms/step - loss: 1.0029 - val_loss: 1.2521\n","2/2 [==============================] - 0s 6ms/step\n","2/2 [==============================] - 0s 6ms/step\n","Test Accuracy: 73.53%\n","Validation Accuracy: 73.53%\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAA/IAAAIjCAYAAACgdyAGAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAACK80lEQVR4nOzdd3hUZdrH8d+kJ0BCC4TQQkdagAABlRUUjIAoiAqsSrOsCiiyvioWEAvsWrGg7moEC1UB14IogmBDqgERRXqHUCQhgdSZ94/DTBiSQMpMzpzk+7muuXJy5syZe5KTydxPuR+bw+FwCAAAAAAAWIKf2QEAAAAAAICiI5EHAAAAAMBCSOQBAAAAALAQEnkAAAAAACyERB4AAAAAAAshkQcAAAAAwEJI5AEAAAAAsBASeQAAAAAALIREHgAAAAAACyGRBwDAQmw2m5588kmzw/CKmTNnymazaffu3cV+7IoVK2Sz2bRixQqPx+VLYmJiNGLECLPDuKjdu3fLZrNp5syZZocCAOUSiTwAVGBvvPGGbDab4uPjzQ7FUpxJo/MWHBys2rVrq0ePHpoyZYqOHj1qdoge1aNHD7fXW9itvDYwWMmIESOK9LvyVGPA7NmzNW3aNI+cCwBQdDaHw+EwOwgAgDkuu+wyHTx4ULt379a2bdvUtGlTs0OyhBUrVqhnz56677771LlzZ+Xm5uro0aP66aef9NlnnykiIkLz58/XlVde6fHnzsjIUEBAgAICAjx+7sIsXbpUR44ccX2/du1avfrqq3r00Ud1ySWXuPa3a9dO7dq1K/Hz5ObmKjs7W8HBwbLZbMV6rN1uV1ZWloKCguTnV377KWJiYtSjR49Ce7pXrVqlHTt2uL7ftWuXJk6cqLvuukvdu3d37W/SpIm6detW6niuvfZabd68Od8oCofDoczMTAUGBsrf37/UzwMAcFd2nwIAAD5l165d+umnn7Rw4UL94x//0KxZszRp0iSzwypQenq6KlWqZHYY+XTv3l033nij276NGzfq6quv1qBBg7RlyxbVqVOn1M/jTFJDQkIUEhJS6vMVV+/evd2+DwkJ0auvvqrevXurR48ehT6uuL83f3//Eid9fn5+pvxsfE23bt3cEvR169Zp4sSJ6tatm2699dYyi8Nms/H7AAAvKr9N1gCAC5o1a5aqVaumfv366cYbb9SsWbMKPO7kyZN64IEHFBMTo+DgYNWrV0/Dhg3TsWPHXMdkZGToySefVPPmzRUSEqI6derohhtucPUMFjZ/uaB5tCNGjFDlypW1Y8cO9e3bV1WqVNEtt9wiSfr+++910003qUGDBgoODlb9+vX1wAMP6MyZM/ni/uOPP3TzzTcrMjJSoaGhatGihR577DFJ0rfffiubzaZFixble9zs2bNls9m0atWqYv08nWJjYzVt2jSdPHlSr7/+utvriomJyXf8k08+ma/32WazacyYMZo1a5Zat26t4OBgLVmyxHXfuUPYnY/fvn27RowYoapVqyoiIkIjR47U6dOn3c575swZ3XfffapZs6aqVKmi6667TgcOHPDIsHhnHFu2bNHf//53VatWTZdffrkkadOmTRoxYoQaN26skJAQRUVFadSoUTp+/LjbOQqaIx8TE6Nrr71WP/zwg7p06aKQkBA1btxY77//vttjC7rGevTooTZt2mjLli3q2bOnwsLCVLduXT333HP54t+zZ4+uu+46VapUSbVq1dIDDzygr776qkjz7vfs2aN7771XLVq0UGhoqGrUqKGbbropXy+18/X9+OOPGj9+vCIjI1WpUiUNHDgw33QMh8OhZ555RvXq1VNYWJh69uyp33777YJxFMfq1at1zTXXKCIiQmFhYbriiiv0448/uh1z6tQpjRs3zvW3X6tWLfXu3VsbNmyQZPx8v/jiC+3Zs8c1ZN95jV/ob/vAgQMaMGCAKleurMjISD344IPKzc11e+7jx4/rtttuU3h4uKpWrarhw4dr48aNzLsHgLPokQeACmrWrFm64YYbFBQUpKFDh+rNN9/U2rVr1blzZ9cxaWlp6t69u37//XeNGjVKHTt21LFjx/Tpp59q//79qlmzpnJzc3Xttddq2bJlGjJkiO6//36dOnVKS5cu1ebNm9WkSZNix5aTk6OEhARdfvnleuGFFxQWFiZJ+uijj3T69Gndc889qlGjhtasWaPXXntN+/fv10cffeR6/KZNm9S9e3cFBgbqrrvuUkxMjHbs2KHPPvtMzz77rHr06KH69etr1qxZGjhwYL6fS2mHHd944426/fbb9fXXX+vZZ58t0TmWL1+u+fPna8yYMapZs2aBjQDnuvnmm9WoUSNNnTpVGzZs0DvvvKNatWrp3//+t+uYESNGaP78+brtttvUtWtXrVy5Uv369StRfIW56aab1KxZM02ZMkXO2XtLly7Vzp07NXLkSEVFRem3337Tf//7X/3222/6+eefLzqMfvv27a6f6fDhw/Xuu+9qxIgRiouLU+vWrS/42L/++kvXXHONbrjhBt188836+OOP9fDDD6tt27bq06ePJGPkwJVXXqlDhw7p/vvvV1RUlGbPnq1vv/22SK957dq1+umnnzRkyBDVq1dPu3fv1ptvvqkePXpoy5YtruvXaezYsapWrZomTZqk3bt3a9q0aRozZozmzZvnOmbixIl65pln1LdvX/Xt21cbNmzQ1VdfraysrCLFdCHLly9Xnz59FBcXp0mTJsnPz08zZszQlVdeqe+//15dunSRJN199936+OOPNWbMGLVq1UrHjx/XDz/8oN9//10dO3bUY489ppSUFO3fv18vv/yyJKly5coXfO7c3FwlJCQoPj5eL7zwgr755hu9+OKLatKkie655x5JxgiU/v37a82aNbrnnnvUsmVL/e9//9Pw4cNL/doBoNxwAAAqnHXr1jkkOZYuXepwOBwOu93uqFevnuP+++93O27ixIkOSY6FCxfmO4fdbnc4HA7Hu+++65DkeOmllwo95ttvv3VIcnz77bdu9+/atcshyTFjxgzXvuHDhzskOR555JF85zt9+nS+fVOnTnXYbDbHnj17XPv+9re/OapUqeK279x4HA6HY8KECY7g4GDHyZMnXfuSk5MdAQEBjkmTJuV7nnM5X89HH31U6DGxsbGOatWqub2uhg0b5jtu0qRJjvP/HUty+Pn5OX777bd8x0tyi8/5+FGjRrkdN3DgQEeNGjVc369fv94hyTFu3Di340aMGJHvnBfz0Ucf5ft9OuMYOnRovuML+r3NmTPHIcnx3XffufbNmDHDIcmxa9cu176GDRvmOy45OdkRHBzs+Oc//+naV9A1dsUVVzgkOd5//33XvszMTEdUVJRj0KBBrn0vvviiQ5Ljk08+ce07c+aMo2XLlgVet0V5fatWrcr33M7X16tXL7dr8YEHHnD4+/u7rsXk5GRHUFCQo1+/fm7HPfroow5JjuHDh18wnnOtXbvW7W/Mbrc7mjVr5khISHA79+nTpx2NGjVy9O7d27UvIiLCMXr06Auev1+/fgVe1xf6237qqafcju3QoYMjLi7O9f2CBQsckhzTpk1z7cvNzXVceeWV+c4JABUVQ+sBoAKaNWuWateurZ49e0oyhmsPHjxYc+fOdRviumDBAsXGxubrtXY+xnlMzZo1NXbs2EKPKQln79y5QkNDXdvp6ek6duyYLr30UjkcDv3yyy+SpKNHj+q7777TqFGj1KBBg0LjGTZsmDIzM/Xxxx+79s2bN085OTkemUtcuXJlnTp1qsSPv+KKK9SqVasiH3/33Xe7fd+9e3cdP35cqampkuQamn/vvfe6HVfQ7600zo9Dcv+9ZWRk6NixY+rataskuYZpX0irVq3cCrVFRkaqRYsW2rlz50UfW7lyZbffZ1BQkLp06eL22CVLlqhu3bq67rrrXPtCQkJ05513XvT8kvvry87O1vHjx9W0aVNVrVq1wNd31113uV2L3bt3V25urvbs2SNJ+uabb5SVlaWxY8e6HTdu3LgixXMhSUlJ2rZtm/7+97/r+PHjOnbsmI4dO6b09HRdddVV+u6772S32yVJVatW1erVq3Xw4MFSP++5CrpWz/99BAYGuv38/fz8NHr0aI/GAQBWRiIPABVMbm6u5s6dq549e2rXrl3avn27tm/frvj4eB05ckTLli1zHbtjxw61adPmgufbsWOHWrRo4dEq6gEBAapXr16+/Xv37tWIESNUvXp11/zaK664QpKUkpIiSa6E4GJxt2zZUp07d3arDTBr1ix17drVI9X709LSVKVKlRI/vlGjRsU6/vxGi2rVqkkyhpZLxjxuPz+/fOf19EoFBcV94sQJ3X///apdu7ZCQ0MVGRnpOs75e7uQ81+bZLw+52u7kHr16uVrUDr/sXv27FGTJk3yHVfUn82ZM2c0ceJE1a9fX8HBwapZs6YiIyN18uTJAl9fUX5XktSsWTO34yIjI13HltS2bdskScOHD1dkZKTb7Z133lFmZqYr5ueee06bN29W/fr11aVLFz355JNFajy5kJCQEEVGRrrtK+j3UadOnXxTElhVAwDyMEceACqY5cuX69ChQ5o7d67mzp2b7/5Zs2bp6quv9uhzFtYzf36BK6fg4OB8S4jl5uaqd+/eOnHihB5++GG1bNlSlSpV0oEDBzRixAhXL2JxDBs2TPfff7/279+vzMxM/fzzz24F6koqOztbf/75p1tjQnF/Buf28hZFYdXeHWW8ymxBcd9888366aef9H//939q3769KleuLLvdrmuuuaZIv7fSvLay+LmMHTtWM2bM0Lhx49StWzdFRETIZrNpyJAhBb4+M39Xznief/55tW/fvsBjnPPcb775ZnXv3l2LFi3S119/reeff17//ve/tXDhQld9geJiKToA8AwSeQCoYGbNmqVatWpp+vTp+e5buHChFi1apLfeekuhoaFq0qSJNm/efMHzNWnSRKtXr1Z2drYCAwMLPMbZi3jy5Em3/c6ex6L49ddf9eeff+q9997TsGHDXPuXLl3qdlzjxo0l6aJxS9KQIUM0fvx4zZkzR2fOnFFgYKAGDx5c5JgK8/HHH+vMmTNKSEhw7atWrVq+1y8V72dQGg0bNpTdbteuXbvcenq3b9/u1ef966+/tGzZMk2ePFkTJ0507Xf2DPuChg0basuWLXI4HG4NLkX92Xz88ccaPny4XnzxRde+jIyMAn/fRY1HMn5GzutZMqaNFGUUwoU4i0+Gh4erV69eFz2+Tp06uvfee3XvvfcqOTlZHTt21LPPPutK5EszfaYwDRs21LfffqvTp0+79cp7+1oFACthaD0AVCBnzpzRwoULde211+rGG2/MdxszZoxOnTqlTz/9VJI0aNAgbdy4scBl2py9h4MGDdKxY8cK7Ml2HtOwYUP5+/vru+++c7v/jTfeKHLszp68c3stHQ6HXnnlFbfjIiMj9be//U3vvvuu9u7dW2A8TjVr1lSfPn304YcfatasWbrmmmtUs2bNIsdUkI0bN2rcuHGqVq2a25zeJk2aKCUlRZs2bXLtO3ToUIE/W29wNiqc/zN/7bXXvPq8Bf3eJGnatGlefd7iSEhI0IEDB1zXvWQk4m+//XaRHu/v75/v9b322muFjra4mF69eikwMFCvvfaa23k98TOLi4tTkyZN9MILLygtLS3f/c5l8HJzc/NNC6hVq5aio6OVmZnp2lepUqUiTY8ojoSEBGVnZ7v9/O12e4GNjwBQUdEjDwAVyKeffqpTp065FfU6V9euXRUZGalZs2Zp8ODB+r//+z99/PHHuummmzRq1CjFxcXpxIkT+vTTT/XWW28pNjZWw4YN0/vvv6/x48drzZo16t69u9LT0/XNN9/o3nvv1fXXX6+IiAjddNNNeu2112Sz2dSkSRN9/vnnSk5OLnLsLVu2VJMmTfTggw/qwIEDCg8P14IFCwrsoXz11Vd1+eWXq2PHjrrrrrvUqFEj7d69W1988YWSkpLcjh02bJhuvPFGSdLTTz9d9B+mjHXtMzIylJubq+PHj+vHH3/Up59+qoiICC1atEhRUVGuY4cMGaKHH35YAwcO1H333afTp0/rzTffVPPmzYtU8K204uLiNGjQIE2bNk3Hjx93LT/3559/SvJOz6pk9Pz+7W9/03PPPafs7GzVrVtXX3/9tXbt2uWV5yuJf/zjH3r99dc1dOhQ3X///apTp45mzZqlkJAQSRf/2Vx77bX64IMPFBERoVatWmnVqlX65ptvVKNGjRLF41xbferUqbr22mvVt29f/fLLL/ryyy9L3dDk5+end955R3369FHr1q01cuRI1a1bVwcOHNC3336r8PBwffbZZzp16pTq1aunG2+8UbGxsapcubK++eYbrV271m3kQVxcnObNm6fx48erc+fOqly5svr371+qGAcMGKAuXbron//8p7Zv366WLVvq008/1YkTJyR571oFACshkQeACsSZnPTu3bvA+/38/NSvXz/NmjVLx48fV40aNfT9999r0qRJWrRokd577z3VqlVLV111lasYnb+/vxYvXqxnn31Ws2fP1oIFC1SjRg1dfvnlatu2revcr732mrKzs/XWW28pODhYN998s55//vmLFqVzCgwM1Geffab77rtPU6dOVUhIiAYOHKgxY8YoNjbW7djY2Fj9/PPPeuKJJ/Tmm28qIyNDDRs21M0335zvvP3791e1atVkt9sLbeAozKuvvuqKrWrVqrrkkks0efJk3XnnnfkKetWoUUOLFi3S+PHj9dBDD7nWfN+2bVuZJPKS9P777ysqKkpz5szRokWL1KtXL82bN08tWrRwJa3eMHv2bI0dO1bTp0+Xw+HQ1VdfrS+//FLR0dFee87iqFy5spYvX66xY8fqlVdeUeXKlTVs2DBdeumlGjRo0EV/Nq+88or8/f01a9YsZWRk6LLLLtM333zjNrWiuJ555hmFhITorbfe0rfffqv4+Hh9/fXX6tevX4nP6dSjRw+tWrVKTz/9tF5//XWlpaUpKipK8fHx+sc//iFJCgsL07333quvv/5aCxculN1uV9OmTfXGG2+4rShx7733KikpSTNmzNDLL7+shg0bljqR9/f31xdffKH7779f7733nvz8/DRw4EBNmjRJl112mVevVQCwCpujrKvgAADgQ3JychQdHa3+/fsrMTHR7HDKXFJSkjp06KAPP/xQt9xyi9nh+JRp06bpgQce0P79+1W3bl2zw6nwPvnkEw0cOFA//PCDLrvsMrPDAQBTMUceAFChffLJJzp69KhbAb3y6syZM/n2TZs2TX5+fvrb3/5mQkS+4/yfTUZGhv7zn/+oWbNmJPEmOP/3kZubq9dee03h4eHq2LGjSVEBgO9gaD0AoEJavXq1Nm3apKefflodOnRwrUdfnj333HNav369evbsqYCAAH355Zf68ssvddddd6l+/fpmh2eqG264QQ0aNFD79u2VkpKiDz/8UH/88YdmzZpldmgV0tixY3XmzBl169ZNmZmZWrhwoX766SdNmTKl2EszAkB5xNB6AECFNGLECH344Ydq3769Zs6cWeS5+la2dOlSTZ48WVu2bFFaWpoaNGig2267TY899pgCAip22/60adP0zjvvaPfu3crNzVWrVq300EMPeWQ5QhTf7Nmz9eKLL2r79u3KyMhQ06ZNdc8992jMmDFmhwYAPoFEHgAAAAAAC2GOPAAAAAAAFkIiDwAAAACAhVTsCXGFsNvtOnjwoKpUqSKbzWZ2OAAAAACAcs7hcOjUqVOKjo6Wn9+F+9xJ5Atw8ODBCl+9FwAAAABQ9vbt26d69epd8BgS+QJUqVJFkvEDDA8PNzkaAAAAAEB5l5qaqvr167vy0QshkS+Aczh9eHg4iTwAAAAAoMwUZXo3xe4AAAAAALAQEnkAAAAAACyERB4AAAAAAAshkQcAAAAAwEJI5AEAAAAAsBASeQAAAAAALIREHgAAAAAACyGRBwAAAADAQkjkAQAAAACwEBJ5AAAAAAAshEQeAAAAAAALIZEHAAAAAMBCSOQBAAAAALAQEnkAAAAAACzE1ET+u+++U//+/RUdHS2bzaZPPvnkoo9ZsWKFOnbsqODgYDVt2lQzZ87Md8z06dMVExOjkJAQxcfHa82aNZ4PHgAAAAAAE5iayKenpys2NlbTp08v0vG7du1Sv3791LNnTyUlJWncuHG644479NVXX7mOmTdvnsaPH69JkyZpw4YNio2NVUJCgpKTk731MgAAAAAAKDM2h8PhMDsISbLZbFq0aJEGDBhQ6DEPP/ywvvjiC23evNm1b8iQITp58qSWLFkiSYqPj1fnzp31+uuvS5Lsdrvq16+vsWPH6pFHHilSLKmpqYqIiFBKSorCw8NL/qK8yOFw6Ex2rtlhAAAAAIAlhAb6y2azmR1GoYqThwaUUUwesWrVKvXq1cttX0JCgsaNGydJysrK0vr16zVhwgTX/X5+furVq5dWrVpV6HkzMzOVmZnp+j41NdWzgXvBmexctZr41cUPBAAAAABoy1MJCguyVApcKEsVuzt8+LBq167ttq927dpKTU3VmTNndOzYMeXm5hZ4zOHDhws979SpUxUREeG61a9f3yvxAwAAAABQWuWjOaKUJkyYoPHjx7u+T01N9flkPjTQX1ueSjA7DAAAAACwhNBAf7ND8BhLJfJRUVE6cuSI274jR44oPDxcoaGh8vf3l7+/f4HHREVFFXre4OBgBQcHeyVmb7HZbOVmWAgAAAAAoOgsNbS+W7duWrZsmdu+pUuXqlu3bpKkoKAgxcXFuR1jt9u1bNky1zEAAAAAAFiZqYl8WlqakpKSlJSUJMlYXi4pKUl79+6VZAx5HzZsmOv4u+++Wzt37tRDDz2kP/74Q2+88Ybmz5+vBx54wHXM+PHj9fbbb+u9997T77//rnvuuUfp6ekaOXJkmb42AAAAAAC8wdSx2evWrVPPnj1d3zvnqQ8fPlwzZ87UoUOHXEm9JDVq1EhffPGFHnjgAb3yyiuqV6+e3nnnHSUk5M0VHzx4sI4ePaqJEyfq8OHDat++vZYsWZKvAB4AAAAAAFbkM+vI+xIrrCMPAAAAACg/ipOHWmqOPAAAAAAAFR2JPAAAAAAAFkIiDwAAAACAhZDIAwAAAABgISTyAAAAAABYCIk8AAAAAAAWQiIPAAAAAICFkMgDAAAAAGAhJPIAAAAAAFgIiTwAAAAAABZCIg8AAAAAgIWQyAMAAAAAYCEk8gAAAAAAWAiJPAAAAAAAFkIiDwAAAACAhZDIAwAAAABgISTyAAAAAABYCIk8AAAAAAAWQiIPAAAAAICFkMgDAAAAAGAhJPIAAAAAAFgIiTwAAAAAABZCIg8AAAAAgIWQyAMAAAAAYCEk8gAAAAAAWAiJPAAAAAAAFkIiDwAAAACAhZDIAwAAAABgISTyAAAAAABYCIk8AAAAAAAWQiIPAAAAAICFkMgDAAAAAGAhJPIAAAAAAFgIiTwAAAAAABZCIg8AAAAAgIWQyAMAAAAAYCEk8gAAAAAAWAiJPAAAAAAAFkIiDwAAAACAhZDIAwAAAABgISTyAAAAAABYCIk8AAAAAAAWQiIPAAAAAICFkMgDAAAAAGAhJPIAAAAAAFgIiTwAAAAAABZCIg8AAAAAgIWQyAMAAAAAYCEk8gAAAAAAWAiJPAAAAAAAFkIiDwAAAACAhZDIAwAAAABgISTyAAAAAABYCIk8AAAAAAAWQiIPAAAAAICFkMgDAAAAAGAhJPIAAAAAAFgIiTwAAAAAABZCIg8AAAAAgIWQyAMAAAAAYCGmJ/LTp09XTEyMQkJCFB8frzVr1hR6bHZ2tp566ik1adJEISEhio2N1ZIlS9yOefLJJ2Wz2dxuLVu29PbLAAAAAACgTJiayM+bN0/jx4/XpEmTtGHDBsXGxiohIUHJyckFHv/444/rP//5j1577TVt2bJFd999twYOHKhffvnF7bjWrVvr0KFDrtsPP/xQFi8HAAAAAACvMzWRf+mll3TnnXdq5MiRatWqld566y2FhYXp3XffLfD4Dz74QI8++qj69u2rxo0b65577lHfvn314osvuh0XEBCgqKgo161mzZpl8XIAAAAAAPA60xL5rKwsrV+/Xr169coLxs9PvXr10qpVqwp8TGZmpkJCQtz2hYaG5utx37Ztm6Kjo9W4cWPdcsst2rt37wVjyczMVGpqqtsNAAAAAABfZFoif+zYMeXm5qp27dpu+2vXrq3Dhw8X+JiEhAS99NJL2rZtm+x2u5YuXaqFCxfq0KFDrmPi4+M1c+ZMLVmyRG+++aZ27dql7t2769SpU4XGMnXqVEVERLhu9evX98yLBAAAAADAw0wvdlccr7zyipo1a6aWLVsqKChIY8aM0ciRI+Xnl/cy+vTpo5tuuknt2rVTQkKCFi9erJMnT2r+/PmFnnfChAlKSUlx3fbt21cWLwcAAAAAgGIzLZGvWbOm/P39deTIEbf9R44cUVRUVIGPiYyM1CeffKL09HTt2bNHf/zxhypXrqzGjRsX+jxVq1ZV8+bNtX379kKPCQ4OVnh4uNsNAAAAAABfZFoiHxQUpLi4OC1btsy1z263a9myZerWrdsFHxsSEqK6desqJydHCxYs0PXXX1/osWlpadqxY4fq1KnjsdgBAAAAADCLqUPrx48fr7ffflvvvfeefv/9d91zzz1KT0/XyJEjJUnDhg3ThAkTXMevXr1aCxcu1M6dO/X999/rmmuukd1u10MPPeQ65sEHH9TKlSu1e/du/fTTTxo4cKD8/f01dOjQMn99AAAAAAB4WoCZTz548GAdPXpUEydO1OHDh9W+fXstWbLEVQBv7969bvPfMzIy9Pjjj2vnzp2qXLmy+vbtqw8++EBVq1Z1HbN//34NHTpUx48fV2RkpC6//HL9/PPPioyMLOuXBwAAAACAx9kcDofD7CB8TWpqqiIiIpSSksJ8eQAAAACA1xUnD7VU1XoAAAAAACo6EnkAAAAAACyERB4AAAAAAAshkQcAAAAAwEJI5AEAAAAAsBASeQAAAAAALIREHgAAAAAACyGRBwAAAADAQkjkAQAAAACwEBJ5AAAAAAAshEQeAAAAAAALIZEHAAAAAMBCSOQBAAAAALAQEnkAAAAAACyERB4AAAAAAAshkQcAAAAAwEJI5AEAAAAAsBASeQAAAAAALIREHgAAAAAACyGRBwAAAADAQkjkAQAAAACwEBJ5AAAAAAAshEQeAAAAAAALIZEHAAAAAMBCSOQBAAAAALAQEnkAAAAAACyERB4AAAAAAAshkQcAAAAAwEJI5AEAAAAAsBASeQAAAAAALIREHgAAAAAACyGRBwAAAADAQkjkAQAAAACwEBJ5AAAAAAAshEQeAAAAAAALIZEHAAAAAMBCSOQBAAAAALAQEnkAAAAAACyERB4AAAAAAAshkQcAAAAAwEJI5AEAAAAAsBASeQAAAAAALIREHgAAAAAACyGRBwAAAADAQkjkAQAAAACwEBJ5AAAAAAAshEQeAAAAAAALIZEHAAAAAMBCSOQBAAAAALAQEnkAAAAAACyERB4AAAAAAAshkQcAAAAAwEJI5AEAAAAAsBASeQAAAAAALIREHgAAAAAACyGRBwAAAADAQkjkAQAAAACwEBJ5AAAAAAAshEQeAAAAAAALIZEHAAAAAMBCSOQBAAAAALAQ0xP56dOnKyYmRiEhIYqPj9eaNWsKPTY7O1tPPfWUmjRpopCQEMXGxmrJkiWlOicAAAAAAFZiaiI/b948jR8/XpMmTdKGDRsUGxurhIQEJScnF3j8448/rv/85z967bXXtGXLFt19990aOHCgfvnllxKfEwAAAAAAK7E5HA6HWU8eHx+vzp076/XXX5ck2e121a9fX2PHjtUjjzyS7/jo6Gg99thjGj16tGvfoEGDFBoaqg8//LBE5yxIamqqIiIilJKSovDw8NK+TAAAAAAALqg4eahpPfJZWVlav369evXqlReMn5969eqlVatWFfiYzMxMhYSEuO0LDQ3VDz/8UOJzOs+bmprqdgMAAAAAwBeZlsgfO3ZMubm5ql27ttv+2rVr6/DhwwU+JiEhQS+99JK2bdsmu92upUuXauHChTp06FCJzylJU6dOVUREhOtWv379Ur46AAAAAAC8w/Rid8XxyiuvqFmzZmrZsqWCgoI0ZswYjRw5Un5+pXsZEyZMUEpKiuu2b98+D0UMAAAAAIBnmZbI16xZU/7+/jpy5Ijb/iNHjigqKqrAx0RGRuqTTz5Renq69uzZoz/++EOVK1dW48aNS3xOSQoODlZ4eLjbDQAAAAAAX2RaIh8UFKS4uDgtW7bMtc9ut2vZsmXq1q3bBR8bEhKiunXrKicnRwsWLND1119f6nMCAAAAAGAFAWY++fjx4zV8+HB16tRJXbp00bRp05Senq6RI0dKkoYNG6a6detq6tSpkqTVq1frwIEDat++vQ4cOKAnn3xSdrtdDz30UJHPCQAAAACAlZmayA8ePFhHjx7VxIkTdfjwYbVv315LlixxFavbu3ev2/z3jIwMPf7449q5c6cqV66svn376oMPPlDVqlWLfE4AAAAAAKzM1HXkfRXryAMAAAAAypIl1pEHAAAAAADFRyIPAAAAAICFkMgDAAAAAGAhJPIAAAAAAFgIiTwAAAAAABZCIg8AAAAAgIWQyAMAAAAAYCEk8gAAAAAAWAiJPAAAAAAAFkIiDwAAAACAhZDIAwAAAABgISTyAAAAAABYCIk8AAAAAAAWQiIPAAAAAICFkMgDAAAAAGAhJPIAAAAAAFgIiTwAAAAAABZCIg8AAAAAgIWQyAMAAAAAYCEk8gAAAAAAWAiJPAAAAAAAFkIiDwAAAACAhZDIAwAAAABgISTyAAAAAABYCIk8AAAAAAAWQiIPAAAAAICFkMgDAAAAAGAhJPIAAAAAAFgIiTwAAAAAABZCIg8AAAAAgIWQyAMAAAAAYCHFTuRjYmL01FNPae/evd6IBwAAAAAAXECxE/lx48Zp4cKFaty4sXr37q25c+cqMzPTG7EBAAAAAIDzlCiRT0pK0po1a3TJJZdo7NixqlOnjsaMGaMNGzZ4I0YAAAAAAHCWzeFwOEpzguzsbL3xxht6+OGHlZ2drbZt2+q+++7TyJEjZbPZPBVnmUpNTVVERIRSUlIUHh5udjgAAAAAgHKuOHloQEmfJDs7W4sWLdKMGTO0dOlSde3aVbfffrv279+vRx99VN98841mz55d0tMDAAAAAIACFDuR37Bhg2bMmKE5c+bIz89Pw4YN08svv6yWLVu6jhk4cKA6d+7s0UABAAAA+AaHw6GcnBzl5uaaHQpgGf7+/goICPDIyPViJ/KdO3dW79699eabb2rAgAEKDAzMd0yjRo00ZMiQUgcHAAAAwLdkZWXp0KFDOn36tNmhAJYTFhamOnXqKCgoqFTnKfYc+T179qhhw4alelJfxxx5AAAAID+73a5t27bJ399fkZGRCgoKsmxdLKAsORwOZWVl6ejRo8rNzVWzZs3k5+dee96rc+STk5N1+PBhxcfHu+1fvXq1/P391alTp+KeEgAAAIAFZGVlyW63q379+goLCzM7HMBSQkNDFRgYqD179igrK0shISElPlexl58bPXq09u3bl2//gQMHNHr06BIHAgAAAMAazu9JBFA0nvrbKfZZtmzZoo4dO+bb36FDB23ZssUjQQEAAAAAgIIVO5EPDg7WkSNH8u0/dOiQAgJKvJodAAAAAAAogmIn8ldffbUmTJiglJQU176TJ0/q0UcfVe/evT0aHAAAAACgfOjRo4fGjRtX5ON3794tm82mpKQkr8VkVcVO5F944QXt27dPDRs2VM+ePdWzZ081atRIhw8f1osvvuiNGAEAAACg1FatWiV/f3/169fP7FB8WkxMjGw2W6G3ESNGlOi8Cxcu1NNPP13k4+vXr69Dhw6pTZs2JXq+4li0aJG6du2qiIgIValSRa1bty5Wo4Mk2Ww2ffLJJ16J73zFHgtft25dbdq0SbNmzdLGjRsVGhqqkSNHaujQoQWuKQ8AAAAAviAxMVFjx45VYmKiDh48qOjoaNNiycrKKvVa4t6ydu1a5ebmSpJ++uknDRo0SFu3bnUtiRYaGup2fHZ2dpFywerVqxcrDn9/f0VFRRXrMSWxbNkyDR48WM8++6yuu+462Ww2bdmyRUuXLvX6c5dUiUrmVapUSXfddZemT5+uF154QcOGDSOJBwAAACoYh8Oh01k5ptwcDkexYk1LS9O8efN0zz33qF+/fpo5c2a+Yz777DN17txZISEhqlmzpgYOHOi6LzMzUw8//LDq16+v4OBgNW3aVImJiZKkmTNnqmrVqm7n+uSTT2Sz2VzfP/nkk2rfvr3eeecdNWrUyLX02JIlS3T55ZeratWqqlGjhq699lrt2LHD7Vz79+/X0KFDVb16dVWqVEmdOnXS6tWrtXv3bvn5+WndunVux0+bNk0NGzaU3W4v1s/IKTIyUlFRUYqKinIl37Vq1VJUVJQyMjJUtWpVzZs3T1dccYVCQkI0a9YsHT9+XEOHDlXdunUVFhamtm3bas6cOW7nPX9ofUxMjKZMmaJRo0apSpUqatCggf773/+67j9/aP2KFStks9m0bNkyderUSWFhYbr00ku1detWt+d55plnVKtWLVWpUkV33HGHHnnkEbVv377Q1/vZZ5/psssu0//93/+pRYsWat68uQYMGKDp06e7Hfe///1PHTt2VEhIiBo3bqzJkycrJyfH9VokaeDAgbLZbK7vvaXE1em2bNmivXv3Kisry23/ddddV+qgAAAAAPi+M9m5ajXxK1Oee8tTCQoLKno6M3/+fLVs2VItWrTQrbfeqnHjxmnChAmuZPuLL77QwIED9dhjj+n9999XVlaWFi9e7Hr8sGHDtGrVKr366quKjY3Vrl27dOzYsWLFvH37di1YsEALFy6Uv7+/JCk9PV3jx49Xu3btlJaWpokTJ2rgwIFKSkqSn5+f0tLSdMUVV6hu3br69NNPFRUVpQ0bNshutysmJka9evXSjBkz1KlTJ9fzzJgxQyNGjPDqMoGPPPKIXnzxRXXo0EEhISHKyMhQXFycHn74YYWHh+uLL77QbbfdpiZNmqhLly6FnufFF1/U008/rUcffVQff/yx7rnnHl1xxRVq0aJFoY957LHH9OKLLyoyMlJ33323Ro0apR9//FGSNGvWLD377LN64403dNlll2nu3Ll68cUX1ahRo0LPFxUVpdmzZ2vz5s2FDuP//vvvNWzYML366qvq3r27duzYobvuukuSNGnSJK1du1a1atXSjBkzdM0117h+v95S7ER+586dGjhwoH799VfZbDZXS5jzD8A5BAMAAAAAfEViYqJuvfVWSdI111yjlJQUrVy5Uj169JAkPfvssxoyZIgmT57sekxsbKwk6c8//9T8+fO1dOlS9erVS5LUuHHjYseQlZWl999/X5GRka59gwYNcjvm3XffVWRkpLZs2aI2bdpo9uzZOnr0qNauXevqHW/atKnr+DvuuEN33323XnrpJQUHB2vDhg369ddf9b///a/Y8RXHuHHjdMMNN7jte/DBB13bY8eO1VdffaX58+dfMJHv27ev7r33XknSww8/rJdfflnffvvtBRP5Z599VldccYUko0GhX79+ysjIUEhIiF577TXdfvvtGjlypCRp4sSJ+vrrr5WWllbo+caOHavvv/9ebdu2VcOGDdW1a1ddffXVuuWWWxQcHCxJmjx5sh555BENHz5ckvH7f/rpp/XQQw9p0qRJrt9p1apVy2Q6QLET+fvvv1+NGjXSsmXL1KhRI61Zs0bHjx/XP//5T73wwgveiBEAAACADwoN9NeWpxJMe+6i2rp1q9asWaNFixZJkgICAjR48GAlJia6EvmkpCTdeeedBT4+KSlJ/v7+ruSxpBo2bOiWxEvStm3bNHHiRK1evVrHjh1zDYffu3ev2rRpo6SkJHXo0KHQ+eUDBgzQ6NGjtWjRIg0ZMkQzZ85Uz549Cx3aPWXKFE2ZMsX1/ZYtW9SgQYNiv5ZzRwBIRofulClTNH/+fB04cEBZWVnKzMxUWFjYBc/Trl0717bNZlNUVJSSk5OL/Jg6depIkpKTk9WgQQNt3brV1TDg1KVLFy1fvrzQ81WqVElffPGFduzYoW+//VY///yz/vnPf+qVV17RqlWrFBYWpo0bN+rHH3/Us88+6/aaMzIydPr06Yu+Tk8rdiK/atUqLV++XDVr1pSfn5/8/Px0+eWXa+rUqbrvvvv0yy+/eCNOAAAAAD7GZrMVa3i7WRITE5WTk+NW3M7hcCg4OFivv/66IiIi8hVwO9eF7pMkPz+/fHP2s7Oz8x1XqVKlfPv69++vhg0b6u2331Z0dLTsdrvatGnjmsJ8secOCgrSsGHDNGPGDN1www2aPXu2XnnllUKPv/vuu3XzzTe7vi9pwb/zX8vzzz+vV155RdOmTVPbtm1VqVIljRs3Lt9U7POdX2vNZrNddG7/uY9xjgwvaT2AczVp0kRNmjTRHXfcoccee0zNmzfXvHnzNHLkSKWlpWny5Mn5RiFIctU7KEvFnjSRm5urKlWqSJJq1qypgwcPSjJal84vMgAAAAAAZsrJydH777+vF198UUlJSa7bxo0bFR0d7SrI1q5dOy1btqzAc7Rt21Z2u10rV64s8P7IyEidOnVK6enprn1FWfv8+PHj2rp1qx5//HFdddVVuuSSS/TXX3+5HdOuXTslJSXpxIkThZ7njjvu0DfffKM33nhDOTk5BSabTtWrV1fTpk1dt4AAzzTE/Pjjj7r++ut16623KjY2Vo0bN9aff/7pkXMXR4sWLbR27Vq3fed/XxQxMTEKCwtz/U47duyorVu3uv3snDdnLYLAwMAym2pe7N9amzZttHHjRjVq1Ejx8fF67rnnFBQUpP/+978lmicCAAAAAN7y+eef66+//tLtt9+uiIgIt/sGDRqkxMRE3X333Zo0aZKuuuoqNWnSREOGDFFOTo4WL16shx9+WDExMRo+fLhGjRrlKna3Z88eJScn6+abb1Z8fLzCwsL06KOP6r777tPq1asLrIp/vmrVqqlGjRr673//qzp16mjv3r165JFH3I4ZOnSopkyZogEDBmjq1KmqU6eOfvnlF0VHR6tbt26SpEsuuURdu3bVww8/rFGjRl20F98bmjVrpo8//lg//fSTqlWrppdeeklHjhxRq1atyjSOsWPH6s4771SnTp106aWXat68edq0adMFc9Unn3xSp0+fVt++fdWwYUOdPHlSr776qrKzs9W7d29Jxlz7a6+9Vg0aNNCNN94oPz8/bdy4UZs3b9YzzzwjyUj+ly1bpssuu0zBwcGqVq2a115nsXvkH3/8cdewhaeeekq7du1S9+7dtXjxYr366qseDxAAAAAASioxMVG9evXKl8RLRiK/bt06bdq0ST169NBHH32kTz/9VO3bt9eVV16pNWvWuI598803deONN+ree+9Vy5Ytdeedd7p6a6tXr64PP/xQixcvdi279uSTT140Nj8/P82dO1fr169XmzZt9MADD+j55593OyYoKEhff/21atWqpb59+6pt27b617/+la8q+u23366srCyNGjWqBD+l0nv88cfVsWNHJSQkqEePHoqKitKAAQPKPI5bbrlFEyZM0IMPPqiOHTtq165dGjFixAWHv19xxRXauXOnhg0bppYtW6pPnz46fPiwvv76a1fRvYSEBH3++ef6+uuv1blzZ3Xt2lUvv/yyGjZs6DrPiy++qKVLl6p+/frq0KGDV1+nzVHcBRgLcOLECVWrVs1tnUQrS01NVUREhFJSUhQeHm52OAAAAIBPyMjI0K5du9zWQYdvePrpp/XRRx9p06ZNZofic3r37q2oqCh98MEHZodywb+h4uShxRpan52drdDQUCUlJbmtr1dYBUUAAAAAgPekpaVp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/fffa9iwYXr11VfVvXt37dixQ3fddZckadKkSVqwYIFefvllzZ07V61bt9bhw4e1ceNGSdLChQsVGxuru+66S3feeWehzxEVFaWcnBwtWrRIN954Y4EJ/8mTJ3XllVfqjjvu0Msvv6wzZ87o4Ycf1s0336zly5frlVde0Z9//qk2bdroqaeekmQ0UJQXxU7kSzMf4nyDBw/W0aNHNXHiRB0+fFjt27fXkiVLXAXw9u7d63bxPf7447LZbHr88cd14MABRUZGqn///nr22Wddxzhbq44fP67IyEhdfvnl+vnnn8vVLw0AAABA8SQmJurWW2+VJF1zzTVKSUnRypUr1aNHD0nSs88+qyFDhrgVwY6NjZUk/fnnn5o/f76WLl2qXr16SZIaN25c7BiysrL0/vvvu+UmgwYNcjvm3XffVWRkpLZs2aI2bdpo9uzZOnr0qNauXevqHW/atKnr+DvuuEN33323XnrpJQUHB2vDhg369ddf9b///a/Y8RXF5MmT9cgjj2j48OGSjJ/D008/rYceekiTJk3S3r17FRUVpV69eikwMFANGjRQly5dJEnVq1eXv7+/qlSpcsHlwrt27apHH31Uf//733X33XerS5cuuvLKKzVs2DBXrvj666+rQ4cOmjJliutx7777rurXr68///xTzZs3V1BQkMLCwsrl0uTFTuRnzJihypUr66abbnLb/9FHH+n06dOuX2hRjRkzRmPGjCnwvhUrVrh9HxAQoEmTJmnSpEmFnm/u3LnFen4AAAAAJRQYZvSMm/XcRbR161atWbPGtZR2QECABg8erMTERFcin5SUVGgvcVJSkvz9/XXFFVeUKuSGDRvm62Dctm2bJk6cqNWrV+vYsWOu4fB79+5VmzZtlJSUpA4dOriS+PMNGDBAo0eP1qJFizRkyBDNnDlTPXv2VExMTIHHT5kyxS353bJlywWX6j7fxo0b9eOPP7p1pubm5iojI0OnT5/WTTfdpGnTpqlx48a65ppr1LdvX/Xv318BAcVLPZ999lmNHz9ey5cv1+rVq/XWW29pypQp+u6779S2bVtt3LhR3377rSpXrpzvsTt27FDz5s2L9XxWU+xEfurUqfrPf/6Tb3+tWrV01113FTuRBwAAAGBRNluxhrebJTExUTk5OW7F7RwOh4KDg/X6668rIiLiggXcLlbczc/PL1/Nruzs7HzHVaqU/2flnBb89ttvKzo6Wna7XW3atFFWVlaRnjsoKEjDhg3TjBkzdMMNN2j27Nl65ZVXCj3+7rvv1s033+z6vrgF/9LS0jR58mTdcMMN+e4LCQlR/fr1tXXrVn3zzTdaunSp7r33Xj3//PNauXKlAgMDi/VcNWrU0E033aSbbrpJU6ZMUYcOHfTCCy/ovffeU1pamvr3769///vf+R5XEeqjFTuR37t3r1uBAaeGDRtq7969HgkKAAAAADwhJydH77//vl588UVdffXVbvcNGDBAc+bM0d1336127dpp2bJlrnpd52rbtq3sdrtWrlzpGlp/rsjISJ06dUrp6emuZD0pKemisR0/flxbt27V22+/re7du0uSfvjhB7dj2rVrp3feeUcnTpwotFf+jjvuUJs2bfTGG28oJyenwCTbyVm0vKQ6duyorVu3ug3vP19oaKj69++v/v37a/To0WrZsqV+/fVXdezYUUFBQa6K+MURFBSkJk2auKrWd+zYUQsWLFBMTEyhvf0lfS4rKHb1g1q1amnTpk359m/cuFE1atTwSFAAAAAA4Amff/65/vrrL91+++1q06aN223QoEGuyvOTJk3SnDlzNGnSJP3+++/69ddfXb29MTExGj58uEaNGqVPPvlEu3bt0ooVKzR//nxJUnx8vMLCwvToo49qx44dmj17doFV8c9XrVo11ahRQ//973+1fft2LV++XOPHj3c7ZujQoYqKitKAAQP0448/aufOnVqwYIFWrVrlOuaSSy5R165d9fDDD2vo0KFeXR5u4sSJev/99zV58mT99ttv+v333zV37lw9/vjjkowK/omJidq8ebN27typDz/8UKGhoWrYsKEk42f53Xff6cCBA4UWC/z8889166236vPPP9eff/6prVu36oUXXtDixYt1/fXXS5JGjx6tEydOaOjQoVq7dq127Nihr776SiNHjnQl7zExMa7q/udOWygPip3IDx06VPfdd5++/fZb5ebmKjc3V8uXL9f999+vIUOGeCNGAAAAACiRxMRE9erVSxEREfnuGzRokNatW6dNmzapR48e+uijj/Tpp5+qffv2uvLKK7VmzRrXsW+++aZuvPFG3XvvvWrZsqXuvPNOV+9w9erV9eGHH2rx4sVq27at5syZoyeffPKisfn5+Wnu3Llav3692rRpowceeCDfkt5B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\n"},"metadata":{}}]},{"cell_type":"code","source":["from sklearn.model_selection import GridSearchCV\n","\n","param_grid = {\n","    'n_estimators': [100, 200],\n","    'max_depth': [3, 6, 9],\n","    'learning_rate': [0.01, 0.1, 0.2]\n","}\n","\n","grid_search = GridSearchCV(estimator=xgb.XGBClassifier(), param_grid=param_grid, cv=3)\n","grid_search.fit(X_train_encoded, y_train)\n","\n","best_model = grid_search.best_estimator_\n","y_pred_test = best_model.predict(X_test_encoded)\n","accuracy_test = accuracy_score(y_test, y_pred_test)\n","print(f\"Best Test Accuracy with Grid Search: {accuracy_test * 100:.2f}%\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"inic9dzA8_EL","executionInfo":{"status":"ok","timestamp":1721039596886,"user_tz":-180,"elapsed":5512,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"75bdcd67-434c-4b8c-f303-77e4a7fd14e9"},"execution_count":92,"outputs":[{"output_type":"stream","name":"stdout","text":["Best Test Accuracy with Grid Search: 76.47%\n"]}]},{"cell_type":"markdown","source":["MODELS"],"metadata":{"id":"y615lQ29i8hx"}},{"cell_type":"markdown","source":["וד להקמת מודל Gradient Boosting עם כיוונון היפר-פרמטרים והערכת ביצועים:"],"metadata":{"id":"Mfmfr2I3i_Nr"}},{"cell_type":"code","source":["print(f\"Number of samples in X_train_encoded: {X_train_encoded.shape[0]}\")\n","print(f\"Number of samples in y_train: {y_train.shape[0]}\")\n"],"metadata":{"id":"TIhAJImnkEqv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1721038659898,"user_tz":-180,"elapsed":2,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"71e4942a-b42e-48fb-d718-f1b6974096a5"},"execution_count":86,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of samples in X_train_encoded: 38\n","Number of samples in y_train: 38\n"]}]},{"cell_type":"code","source":["import numpy as np\n","from sklearn.model_selection import GridSearchCV, cross_val_score\n","from sklearn.metrics import accuracy_score, classification_report\n","from sklearn.ensemble import GradientBoostingClassifier\n","\n","# בניית המודל לאחר הסרת החריגים\n","# בדיקת מספר הדוגמאות כדי לוודא שהתאמתם נכונה\n","print(f\"Number of samples in X_train_clean_final: {X_train_encoded.shape[0]}\")\n","print(f\"Number of samples in y_train_clean_final: {y_train.shape[0]}\")\n","print(f\"Number of samples in X_test_clean_final: {X_test_encoded.shape[0]}\")\n","print(f\"Number of samples in y_test_clean_final: {y_test.shape[0]}\")\n","\n","# הגדרת המסווג והיפר-פרמטרים לבדיקת GridSearchCV\n","gbc = GradientBoostingClassifier()\n","param_grid = {\n","    'n_estimators': [50, 100, 150],   # מספר העצים ביער\n","    'learning_rate': [0.01, 0.1, 0.2],  # קצב הלמידה\n","    'max_depth': [3, 4, 5]  # עומק מרבי של כל עץ\n","}\n","\n","# כיוונון היפר-פרמטרים עם GridSearchCV\n","grid_search = GridSearchCV(estimator=gbc, param_grid=param_grid, cv=5, n_jobs=-1, scoring='accuracy', error_score='raise')\n","grid_search.fit(X_train_encoded, y_train)\n","\n","# קבלת התוצאות הטובות ביותר מה-GridSearchCV\n","best_params = grid_search.best_params_\n","best_model = grid_search.best_estimator_\n","\n","print(f\"Best parameters found: {best_params}\")\n","\n","# ביצוע Cross-Validation להערכת הביצועים של המודל הטוב ביותר\n","cv_scores = cross_val_score(best_model, X_train_encoded, y_train, cv=5, scoring='accuracy')\n","print(f\"Cross-Validation Scores: {cv_scores}\")\n","print(f\"Mean CV Accuracy: {np.mean(cv_scores)}\")\n","\n","# אימון המודל הטוב ביותר על כל נתוני האימון\n","best_model.fit(X_train_encoded, y_train)\n","\n","# ניבוי על נתוני הבדיקה\n","y_pred = best_model.predict(X_test_encoded)\n","\n","# הערכת ביצועים\n","accuracy = accuracy_score(y_test, y_pred)\n","report = classification_report(y_test, y_pred)\n","\n","print(f\"Test Accuracy: {accuracy}\")\n","print(f\"Classification Report:\\n{report}\")\n"],"metadata":{"id":"wVH7wjOZjBHl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1721038699559,"user_tz":-180,"elapsed":13116,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"081f2fd5-a8d5-4e8d-9236-be5a246cfd64"},"execution_count":87,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of samples in X_train_clean_final: 38\n","Number of samples in y_train_clean_final: 38\n","Number of samples in X_test_clean_final: 34\n","Number of samples in y_test_clean_final: 34\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/joblib/externals/loky/backend/fork_exec.py:38: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n","  pid = os.fork()\n","/usr/local/lib/python3.10/dist-packages/joblib/externals/loky/backend/fork_exec.py:38: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n","  pid = os.fork()\n"]},{"output_type":"stream","name":"stdout","text":["Best parameters found: {'learning_rate': 0.01, 'max_depth': 5, 'n_estimators': 50}\n","Cross-Validation Scores: [0.875      0.875      0.75       0.85714286 1.        ]\n","Mean CV Accuracy: 0.8714285714285716\n","Test Accuracy: 0.7647058823529411\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.71      1.00      0.83        20\n","           1       1.00      0.43      0.60        14\n","\n","    accuracy                           0.76        34\n","   macro avg       0.86      0.71      0.72        34\n","weighted avg       0.83      0.76      0.74        34\n","\n"]}]},{"cell_type":"markdown","source":["Random Forest"],"metadata":{"id":"-FwjACbyoCCx"}},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestClassifier\n","\n","# הגדרת המסווג והיפר-פרמטרים לבדיקת GridSearchCV\n","rfc = RandomForestClassifier()\n","param_grid_rf = {\n","    'n_estimators': [50, 100, 150],   # מספר העצים ביער\n","    'max_depth': [3, 4, 5, None],     # עומק מרבי של כל עץ\n","    'min_samples_split': [2, 5, 10],  # מינימום דוגמאות לפיצול צומת\n","    'min_samples_leaf': [1, 2, 4]     # מינימום דוגמאות לעלה\n","}\n","\n","# כיוונון היפר-פרמטרים עם GridSearchCV\n","grid_search_rf = GridSearchCV(estimator=rfc, param_grid=param_grid_rf, cv=5, n_jobs=-1, scoring='accuracy', error_score='raise')\n","grid_search_rf.fit(X_train_encoded, y_train)\n","\n","# קבלת התוצאות הטובות ביותר מה-GridSearchCV\n","best_params_rf = grid_search_rf.best_params_\n","best_model_rf = grid_search_rf.best_estimator_\n","\n","print(f\"Best parameters found for Random Forest: {best_params_rf}\")\n","\n","# ביצוע Cross-Validation להערכת הביצועים של המודל הטוב ביותר\n","cv_scores_rf = cross_val_score(best_model_rf, X_train_encoded, y_train, cv=5, scoring='accuracy')\n","print(f\"Cross-Validation Scores for Random Forest: {cv_scores_rf}\")\n","print(f\"Mean CV Accuracy for Random Forest: {np.mean(cv_scores_rf)}\")\n","\n","# אימון המודל הטוב ביותר על כל נתוני האימון\n","best_model_rf.fit(X_train_encoded, y_train)\n","\n","# ניבוי על נתוני הבדיקה\n","y_pred_rf = best_model_rf.predict(X_test_encoded)\n","\n","# הערכת ביצועים\n","accuracy_rf = accuracy_score(y_test, y_pred_rf)\n","report_rf = classification_report(y_test, y_pred_rf)\n","\n","print(f\"Test Accuracy for Random Forest: {accuracy_rf}\")\n","print(f\"Classification Report for Random Forest:\\n{report_rf}\")\n"],"metadata":{"id":"hhfBu55AjKcq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1721038814271,"user_tz":-180,"elapsed":89894,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"cf192165-a62c-4d0a-ee94-8591106b3d05"},"execution_count":88,"outputs":[{"output_type":"stream","name":"stdout","text":["Best parameters found for Random Forest: {'max_depth': 3, 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 100}\n","Cross-Validation Scores for Random Forest: [0.875 1.    0.75  1.    1.   ]\n","Mean CV Accuracy for Random Forest: 0.925\n","Test Accuracy for Random Forest: 0.7941176470588235\n","Classification Report for Random Forest:\n","              precision    recall  f1-score   support\n","\n","           0       0.76      0.95      0.84        20\n","           1       0.89      0.57      0.70        14\n","\n","    accuracy                           0.79        34\n","   macro avg       0.82      0.76      0.77        34\n","weighted avg       0.81      0.79      0.78        34\n","\n"]}]},{"cell_type":"code","source":["\n","from imblearn.over_sampling import SMOTE\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.model_selection import GridSearchCV, cross_val_score\n","from sklearn.metrics import accuracy_score, classification_report\n","\n","# יישום SMOTE לאיזון הנתונים\n","smote = SMOTE(random_state=42)\n","X_train_balanced, y_train_balanced = smote.fit_resample(X_train_encoded, y_train)\n","\n","# הגדרת המסווג והיפר-פרמטרים לבדיקת GridSearchCV\n","rfc = RandomForestClassifier()\n","param_grid_rf = {\n","    'n_estimators': [50, 100, 150],   # מספר העצים ביער\n","    'max_depth': [3, 4, 5, None],     # עומק מרבי של כל עץ\n","    'min_samples_split': [2, 5, 10],  # מינימום דוגמאות לפיצול צומת\n","    'min_samples_leaf': [1, 2, 4]     # מינימום דוגמאות לעלה\n","}\n","\n","# כיוונון היפר-פרמטרים עם GridSearchCV\n","grid_search_rf = GridSearchCV(estimator=rfc, param_grid=param_grid_rf, cv=5, n_jobs=-1, scoring='accuracy', error_score='raise')\n","grid_search_rf.fit(X_train_balanced, y_train_balanced)\n","\n","# קבלת התוצאות הטובות ביותר מה-GridSearchCV\n","best_params_rf = grid_search_rf.best_params_\n","best_model_rf = grid_search_rf.best_estimator_\n","\n","print(f\"Best parameters found for Random Forest with SMOTE: {best_params_rf}\")\n","\n","# ביצוע Cross-Validation להערכת הביצועים של המודל הטוב ביותר\n","cv_scores_rf = cross_val_score(best_model_rf, X_train_balanced, y_train_balanced, cv=5, scoring='accuracy')\n","print(f\"Cross-Validation Scores for Random Forest with SMOTE: {cv_scores_rf}\")\n","print(f\"Mean CV Accuracy for Random Forest with SMOTE: {np.mean(cv_scores_rf)}\")\n","\n","# אימון המודל הטוב ביותר על כל נתוני האימון\n","best_model_rf.fit(X_train_balanced, y_train_balanced)\n","\n","# ניבוי על נתוני הבדיקה\n","y_pred_rf = best_model_rf.predict(X_test_encoded)\n","\n","# הערכת ביצועים\n","accuracy_rf = accuracy_score(y_test, y_pred_rf)\n","report_rf = classification_report(y_test, y_pred_rf)\n","\n","print(f\"Test Accuracy for Random Forest with SMOTE: {accuracy_rf}\")\n","print(f\"Classification Report for Random Forest with SMOTE:\\n{report_rf}\")\n"],"metadata":{"id":"QI6vaSXYoFTx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1721038961677,"user_tz":-180,"elapsed":97532,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"52cfd7e3-575b-43e9-d1f0-6da2a547e9ff"},"execution_count":89,"outputs":[{"output_type":"stream","name":"stdout","text":["Best parameters found for Random Forest with SMOTE: {'max_depth': 3, 'min_samples_leaf': 1, 'min_samples_split': 2, 'n_estimators': 100}\n","Cross-Validation Scores for Random Forest with SMOTE: [0.90909091 1.         1.         0.90909091 1.        ]\n","Mean CV Accuracy for Random Forest with SMOTE: 0.9636363636363636\n","Test Accuracy for Random Forest with SMOTE: 0.7352941176470589\n","Classification Report for Random Forest with SMOTE:\n","              precision    recall  f1-score   support\n","\n","           0       0.74      0.85      0.79        20\n","           1       0.73      0.57      0.64        14\n","\n","    accuracy                           0.74        34\n","   macro avg       0.73      0.71      0.72        34\n","weighted avg       0.73      0.74      0.73        34\n","\n"]}]},{"cell_type":"markdown","source":["SVM"],"metadata":{"id":"DG6wEqp5qlhf"}},{"cell_type":"code","source":["from sklearn.svm import SVC\n","\n","# הגדרת המסווג והיפר-פרמטרים לבדיקת GridSearchCV\n","svc = SVC()\n","param_grid_svc = {\n","    'C': [0.1, 1, 10, 100],      # פרמטר הרגולריזציה\n","    'gamma': [1, 0.1, 0.01, 0.001],  # פרמטר הגרעין\n","    'kernel': ['rbf', 'linear']   # סוג הגרעין\n","}\n","\n","# כיוונון היפר-פרמטרים עם GridSearchCV\n","grid_search_svc = GridSearchCV(estimator=svc, param_grid=param_grid_svc, cv=5, n_jobs=-1, scoring='accuracy', error_score='raise')\n","grid_search_svc.fit(X_train_encoded, y_train)\n","\n","# קבלת התוצאות הטובות ביותר מה-GridSearchCV\n","best_params_svc = grid_search_svc.best_params_\n","best_model_svc = grid_search_svc.best_estimator_\n","\n","print(f\"Best parameters found for SVM: {best_params_svc}\")\n","\n","# ביצוע Cross-Validation להערכת הביצועים של המודל הטוב ביותר\n","cv_scores_svc = cross_val_score(best_model_svc, X_train_encoded, y_train, cv=5, scoring='accuracy')\n","print(f\"Cross-Validation Scores for SVM: {cv_scores_svc}\")\n","print(f\"Mean CV Accuracy for SVM: {np.mean(cv_scores_svc)}\")\n","\n","# אימון המודל הטוב ביותר על כל נתוני האימון\n","best_model_svc.fit(X_train_encoded, y_train)\n","\n","# ניבוי על נתוני הבדיקה\n","y_pred_svc = best_model_svc.predict(X_test_encoded)\n","\n","# הערכת ביצועים\n","accuracy_svc = accuracy_score(y_test, y_pred_svc)\n","report_svc = classification_report(y_test, y_pred_svc)\n","\n","print(f\"Test Accuracy for SVM: {accuracy_svc}\")\n","print(f\"Classification Report for SVM:\\n{report_svc}\")\n"],"metadata":{"id":"U-ZUkOI4o8xp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1719809180314,"user_tz":-180,"elapsed":3761,"user":{"displayName":"Tehilla Mosh","userId":"03307831208106892920"}},"outputId":"98f44360-9397-4b2e-b9e1-3e71c1f4a9fe"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/joblib/externals/loky/backend/fork_exec.py:38: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n","  pid = os.fork()\n"]},{"output_type":"stream","name":"stdout","text":["Best parameters found for SVM: {'C': 0.1, 'gamma': 1, 'kernel': 'linear'}\n","Cross-Validation Scores for SVM: [0.875 0.875 1.    1.    1.   ]\n","Mean CV Accuracy for SVM: 0.95\n","Test Accuracy for SVM: 0.8235294117647058\n","Classification Report for SVM:\n","              precision    recall  f1-score   support\n","\n","           0       0.85      0.85      0.85        20\n","           1       0.79      0.79      0.79        14\n","\n","    accuracy                           0.82        34\n","   macro avg       0.82      0.82      0.82        34\n","weighted avg       0.82      0.82      0.82        34\n","\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"PVa_bc4Pqn_A"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[{"file_id":"1zEUcrFTVJK63ZfoTPUz8S8Qjt6LvqxBe","timestamp":1719806723025}],"mount_file_id":"1BT6b65gREcxXhMsYq3KWg6crYSaENQI9","authorship_tag":"ABX9TyOcP6EOOuVoRT2kvucDEXe/"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}